
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Mon Jan 03 14:28:31 EST 2011
//----------------------------------------------------

package astex.parser;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.net.*;
import astex.*;
import astex.anasurface.*;

/** CUP v0.10j generated parser.
  * @version Mon Jan 03 14:28:31 EST 2011
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\327\000\002\017\004\000\002\002\004\000\002\017" +
    "\003\000\002\020\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\031\002\000\002\031\004\000\002\031\004\000\002\031" +
    "\004\000\002\031\004\000\002\031\005\000\002\031\004" +
    "\000\002\031\003\000\002\031\004\000\002\022\004\000" +
    "\002\022\006\000\002\022\006\000\002\022\005\000\002" +
    "\022\006\000\002\022\006\000\002\022\006\000\002\022" +
    "\005\000\002\036\005\000\002\036\005\000\002\023\006" +
    "\000\002\023\005\000\002\023\007\000\002\023\007\000" +
    "\002\023\010\000\002\023\010\000\002\023\010\000\002" +
    "\023\010\000\002\023\006\000\002\023\007\000\002\023" +
    "\005\000\002\024\004\000\002\024\005\000\002\024\006" +
    "\000\002\024\005\000\002\024\004\000\002\024\005\000" +
    "\002\024\005\000\002\024\005\000\002\024\006\000\002" +
    "\024\005\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\007\000\002\033\007\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\004\000\002\027" +
    "\005\000\002\027\005\000\002\030\005\000\002\030\005" +
    "\000\002\025\004\000\002\025\004\000\002\025\006\000" +
    "\002\026\006\000\002\026\004\000\002\026\004\000\002" +
    "\026\004\000\002\044\004\000\002\034\005\000\002\034" +
    "\006\000\002\034\004\000\002\034\005\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\023\000" +
    "\002\034\004\000\002\034\003\000\002\034\004\000\002" +
    "\034\004\000\002\034\004\000\002\034\004\000\002\034" +
    "\005\000\002\041\004\000\002\042\005\000\002\045\004" +
    "\000\002\046\004\000\002\040\005\000\002\040\005\000" +
    "\002\035\006\000\002\035\005\000\002\035\003\000\002" +
    "\032\005\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\032\006\000\002\032\006\000\002\032\010" +
    "\000\002\032\007\000\002\032\010\000\002\032\011\000" +
    "\002\032\011\000\002\032\011\000\002\032\006\000\002" +
    "\032\006\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\032\006\000\002\032\005\000\002\037\006" +
    "\000\002\037\005\000\002\037\005\000\002\037\004\000" +
    "\002\037\005\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\012\002\000\002\012\003" +
    "\000\002\011\003\000\002\011\004\000\002\010\004\000" +
    "\002\010\004\000\002\010\004\000\002\010\006\000\002" +
    "\010\004\000\002\010\004\000\002\014\003\000\002\013" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\004\000\002\013\004\000\002\013\004\000" +
    "\002\013\006\000\002\013\005\000\002\013\004\000\002" +
    "\013\010\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\007\003\000\002\007\004\000\002" +
    "\047\003\000\002\047\003\000\002\004\003\000\002\004" +
    "\004\000\002\005\003\000\002\005\004\000\002\006\003" +
    "\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\200\004\uffe8\033\125\034\120\035\044\036" +
    "\057\037\033\052\007\054\062\063\121\064\076\065\073" +
    "\066\031\067\130\070\025\071\054\074\110\075\113\076" +
    "\060\102\107\103\017\104\077\105\126\106\004\107\124" +
    "\110\045\114\012\115\105\116\111\117\021\123\027\124" +
    "\114\125\117\126\055\131\101\132\022\133\006\135\041" +
    "\136\131\137\005\140\100\141\056\144\020\145\010\146" +
    "\024\147\053\157\026\160\116\161\040\162\115\163\127" +
    "\164\071\171\067\172\065\173\122\174\050\175\035\176" +
    "\023\177\046\200\030\201\104\202\042\207\103\212\123" +
    "\001\002\000\004\004\uffb4\001\002\000\126\005\141\013" +
    "\144\014\202\015\170\016\203\017\174\020\153\021\163" +
    "\022\154\023\147\024\175\025\145\026\133\041\172\042" +
    "\162\043\165\044\132\045\156\046\135\047\167\050\177" +
    "\051\200\052\171\053\151\055\134\057\140\060\204\061" +
    "\207\062\161\071\142\072\155\073\176\100\146\120\173" +
    "\142\136\143\164\165\152\166\166\167\157\170\150\207" +
    "\205\212\201\001\002\000\006\210\212\211\213\001\002" +
    "\000\014\067\u0180\070\u017e\076\u017c\077\u017f\212\u017d\001" +
    "\002\000\014\004\uff6e\067\u0176\076\u0173\203\273\212\u0174" +
    "\001\002\000\004\004\ufffa\001\002\000\012\121\u016e\122" +
    "\u016d\210\212\211\213\001\002\000\004\004\ufff8\001\002" +
    "\000\004\004\ufff2\001\002\000\004\004\uffea\001\002\000" +
    "\202\002\u016c\004\uffe8\033\125\034\120\035\044\036\057" +
    "\037\033\052\007\054\062\063\121\064\076\065\073\066" +
    "\031\067\130\070\025\071\054\074\110\075\113\076\060" +
    "\102\107\103\017\104\077\105\126\106\004\107\124\110" +
    "\045\114\012\115\105\116\111\117\021\123\027\124\114" +
    "\125\117\126\055\131\101\132\022\133\006\135\041\136" +
    "\131\137\005\140\100\141\056\144\020\145\010\146\024" +
    "\147\053\157\026\160\116\161\040\162\115\163\127\164" +
    "\071\171\067\172\065\173\122\174\050\175\035\176\023" +
    "\177\046\200\030\201\104\202\042\207\103\212\123\001" +
    "\002\000\004\004\uffb7\001\002\000\004\212\u0169\001\002" +
    "\000\006\210\212\211\213\001\002\000\004\004\uff8e\001" +
    "\002\000\004\212\u0166\001\002\000\004\210\u0164\001\002" +
    "\000\136\005\141\013\144\014\202\015\170\016\203\017" +
    "\174\020\153\021\163\022\154\023\147\024\175\025\145" +
    "\026\133\027\u015a\030\u015f\031\u015c\032\u015e\041\172\042" +
    "\162\043\165\044\132\045\156\046\135\047\167\050\177" +
    "\051\200\052\171\053\151\055\134\057\140\060\204\061" +
    "\207\062\161\071\142\072\155\073\176\100\u015d\120\173" +
    "\142\136\143\164\165\152\166\166\167\157\170\150\207" +
    "\205\212\201\001\002\000\004\212\u0158\001\002\000\132" +
    "\005\141\013\144\014\202\015\170\016\203\017\174\020" +
    "\153\021\163\022\154\023\147\024\175\025\145\026\133" +
    "\041\172\042\162\043\165\044\132\045\156\046\135\047" +
    "\167\050\177\051\200\052\171\053\151\055\134\057\140" +
    "\060\204\061\207\062\161\071\142\072\155\073\176\100" +
    "\146\120\173\142\136\143\164\165\152\166\166\167\157" +
    "\170\150\207\205\210\212\211\213\212\201\001\002\000" +
    "\006\004\uff6e\203\273\001\002\000\012\067\u012a\070\u0129" +
    "\076\u0127\212\u0128\001\002\000\004\004\uffee\001\002\000" +
    "\004\210\u0125\001\002\000\004\004\ufff0\001\002\000\004" +
    "\212\u0122\001\002\000\004\004\ufffd\001\002\000\004\004" +
    "\ufffb\001\002\000\004\004\uff9c\001\002\000\126\005\141" +
    "\013\144\014\202\015\170\016\203\017\174\020\153\021" +
    "\163\022\154\023\147\024\175\025\145\026\133\041\172" +
    "\042\162\043\165\044\132\045\156\046\135\047\167\050" +
    "\177\051\200\052\171\053\151\055\134\057\140\060\204" +
    "\061\207\062\161\071\142\072\155\073\176\100\146\120" +
    "\173\142\136\143\164\165\152\166\166\167\157\170\150" +
    "\207\205\212\201\001\002\000\130\005\uff6e\013\uff6e\014" +
    "\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e" +
    "\023\uff6e\024\uff6e\025\uff6e\026\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\055\uff6e\057\uff6e\060\uff6e\061\uff6e\062" +
    "\uff6e\071\uff6e\072\uff6e\073\uff6e\100\uff6e\120\uff6e\142\uff6e" +
    "\143\uff6e\165\uff6e\166\uff6e\167\uff6e\170\uff6e\203\273\207" +
    "\uff6e\212\uff6e\001\002\000\004\004\ufff1\001\002\000\006" +
    "\210\212\211\213\001\002\000\004\004\uffb3\001\002\000" +
    "\006\004\uff6e\203\273\001\002\000\004\004\ufff7\001\002" +
    "\000\126\005\141\013\144\014\202\015\170\016\203\017" +
    "\174\020\153\021\163\022\154\023\147\024\175\025\145" +
    "\026\133\041\172\042\162\043\165\044\132\045\156\046" +
    "\135\047\167\050\177\051\200\052\171\053\151\055\134" +
    "\057\140\060\204\061\207\062\161\071\142\072\155\073" +
    "\176\100\146\120\173\142\136\143\164\165\152\166\166" +
    "\167\157\170\150\207\205\212\201\001\002\000\004\004" +
    "\uffec\001\002\000\202\002\uffff\004\uffff\033\uffff\034\uffff" +
    "\035\uffff\036\uffff\037\uffff\052\uffff\054\uffff\063\uffff\064" +
    "\uffff\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff\074\uffff" +
    "\075\uffff\076\uffff\102\uffff\103\uffff\104\uffff\105\uffff\106" +
    "\uffff\107\uffff\110\uffff\114\uffff\115\uffff\116\uffff\117\uffff" +
    "\123\uffff\124\uffff\125\uffff\126\uffff\131\uffff\132\uffff\133" +
    "\uffff\135\uffff\136\uffff\137\uffff\140\uffff\141\uffff\144\uffff" +
    "\145\uffff\146\uffff\147\uffff\157\uffff\160\uffff\161\uffff\162" +
    "\uffff\163\uffff\164\uffff\171\uffff\172\uffff\173\uffff\174\uffff" +
    "\175\uffff\176\uffff\177\uffff\200\uffff\201\uffff\202\uffff\207" +
    "\uffff\212\uffff\001\002\000\004\210\u0119\001\002\000\006" +
    "\203\273\212\uff6e\001\002\000\004\130\u0114\001\002\000" +
    "\004\004\uffe1\001\002\000\006\210\212\211\213\001\002" +
    "\000\004\052\u010f\001\002\000\004\004\u010e\001\002\000" +
    "\010\067\372\076\370\212\371\001\002\000\004\004\uffe9" +
    "\001\002\000\004\004\ufff3\001\002\000\006\004\uff6e\203" +
    "\273\001\002\000\004\004\ufffc\001\002\000\006\004\uff6e" +
    "\203\273\001\002\000\004\004\ufff5\001\002\000\004\212" +
    "\365\001\002\000\004\004\uffef\001\002\000\006\130\361" +
    "\212\362\001\002\000\004\004\uffed\001\002\000\004\004" +
    "\uffeb\001\002\000\004\212\360\001\002\000\004\004\uffb6" +
    "\001\002\000\126\005\141\013\144\014\202\015\170\016" +
    "\203\017\174\020\153\021\163\022\154\023\147\024\175" +
    "\025\145\026\133\041\172\042\162\043\165\044\132\045" +
    "\156\046\135\047\167\050\177\051\200\052\171\053\151" +
    "\055\134\057\140\060\204\061\207\062\161\071\142\072" +
    "\155\073\176\100\146\120\173\142\136\143\164\165\152" +
    "\166\166\167\157\170\150\207\205\212\201\001\002\000" +
    "\004\212\351\001\002\000\004\004\ufff4\001\002\000\006" +
    "\210\212\211\213\001\002\000\130\005\uff6e\013\uff6e\014" +
    "\uff6e\015\uff6e\016\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e" +
    "\023\uff6e\024\uff6e\025\uff6e\026\uff6e\041\uff6e\042\uff6e\043" +
    "\uff6e\044\uff6e\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e" +
    "\052\uff6e\053\uff6e\055\uff6e\057\uff6e\060\uff6e\061\uff6e\062" +
    "\uff6e\071\uff6e\072\uff6e\073\uff6e\100\uff6e\120\uff6e\142\uff6e" +
    "\143\uff6e\165\uff6e\166\uff6e\167\uff6e\170\uff6e\203\273\207" +
    "\uff6e\212\uff6e\001\002\000\006\210\212\211\213\001\002" +
    "\000\004\004\ufff9\001\002\000\004\212\342\001\002\000" +
    "\004\212\337\001\002\000\006\210\212\211\213\001\002" +
    "\000\004\004\ufff6\001\002\000\006\203\273\212\uff6e\001" +
    "\002\000\134\004\uff6e\005\141\013\144\014\202\015\170" +
    "\016\203\017\174\020\153\021\163\022\154\023\147\024" +
    "\175\025\145\026\133\041\172\042\162\043\165\044\132" +
    "\045\156\046\135\047\167\050\177\051\200\052\171\053" +
    "\151\055\134\057\140\060\204\061\207\062\161\071\142" +
    "\072\155\073\176\100\146\120\173\130\325\142\136\143" +
    "\164\165\152\166\166\167\157\170\150\203\273\207\205" +
    "\212\326\001\002\000\006\004\uff6e\203\273\001\002\000" +
    "\004\212\321\001\002\000\004\130\320\001\002\000\004" +
    "\212\316\001\002\000\126\005\141\013\144\014\202\015" +
    "\170\016\203\017\174\020\153\021\163\022\154\023\147" +
    "\024\175\025\145\026\133\041\172\042\162\043\165\044" +
    "\132\045\156\046\135\047\167\050\177\051\200\052\171" +
    "\053\151\055\134\057\140\060\204\061\207\062\161\071" +
    "\142\072\155\073\176\100\146\120\173\142\136\143\164" +
    "\165\152\166\166\167\157\170\150\207\205\212\201\001" +
    "\002\000\010\203\273\210\uff6e\211\uff6e\001\002\000\006" +
    "\004\uff6e\203\273\001\002\000\126\005\141\013\144\014" +
    "\202\015\170\016\203\017\174\020\153\021\163\022\154" +
    "\023\147\024\175\025\145\026\133\041\172\042\162\043" +
    "\165\044\132\045\156\046\135\047\167\050\177\051\200" +
    "\052\171\053\151\055\134\057\140\060\204\061\207\062" +
    "\161\071\142\072\155\073\176\100\146\120\173\142\136" +
    "\143\164\165\152\166\166\167\157\170\150\207\205\212" +
    "\201\001\002\000\006\210\212\211\213\001\002\000\004" +
    "\004\uffb5\001\002\000\006\004\uff6e\203\273\001\002\000" +
    "\006\052\265\066\264\001\002\000\126\005\141\013\144" +
    "\014\202\015\170\016\203\017\174\020\153\021\163\022" +
    "\154\023\147\024\175\025\145\026\133\041\172\042\162" +
    "\043\165\044\132\045\156\046\135\047\167\050\177\051" +
    "\200\052\171\053\151\055\134\057\140\060\204\061\207" +
    "\062\161\071\142\072\155\073\176\100\146\120\173\142" +
    "\136\143\164\165\152\166\166\167\157\170\150\207\205" +
    "\212\201\001\002\000\004\212\263\001\002\000\006\210" +
    "\212\211\213\001\002\000\004\212\201\001\002\000\004" +
    "\212\201\001\002\000\016\004\uff36\006\uff36\010\uff36\011" +
    "\uff36\012\uff36\127\uff36\001\002\000\014\004\uff64\010\uff64" +
    "\011\216\012\217\127\uff64\001\002\000\016\004\uff4e\006" +
    "\uff4e\010\uff4e\011\uff4e\012\uff4e\127\uff4e\001\002\000\126" +
    "\005\141\013\144\014\202\015\170\016\203\017\174\020" +
    "\153\021\163\022\154\023\147\024\175\025\145\026\133" +
    "\041\172\042\162\043\165\044\132\045\156\046\135\047" +
    "\167\050\177\051\200\052\171\053\151\055\134\057\140" +
    "\060\204\061\207\062\161\071\142\072\155\073\176\100" +
    "\146\120\173\142\136\143\164\165\152\166\166\167\157" +
    "\170\150\207\205\212\201\001\002\000\016\004\uff4a\006" +
    "\uff4a\010\uff4a\011\uff4a\012\uff4a\127\uff4a\001\002\000\004" +
    "\004\uffe4\001\002\000\126\005\141\013\144\014\202\015" +
    "\170\016\203\017\174\020\153\021\163\022\154\023\147" +
    "\024\175\025\145\026\133\041\172\042\162\043\165\044" +
    "\132\045\156\046\135\047\167\050\177\051\200\052\171" +
    "\053\151\055\134\057\140\060\204\061\207\062\161\071" +
    "\142\072\155\073\176\100\146\120\173\142\136\143\164" +
    "\165\152\166\166\167\157\170\150\207\205\212\201\001" +
    "\002\000\126\005\141\013\144\014\202\015\170\016\203" +
    "\017\174\020\153\021\163\022\154\023\147\024\175\025" +
    "\145\026\133\041\172\042\162\043\165\044\132\045\156" +
    "\046\135\047\167\050\177\051\200\052\171\053\151\055" +
    "\134\057\140\060\204\061\207\062\161\071\142\072\155" +
    "\073\176\100\146\120\173\142\136\143\164\165\152\166" +
    "\166\167\157\170\150\207\205\212\201\001\002\000\016" +
    "\004\uff42\006\uff42\010\uff42\011\uff42\012\uff42\127\uff42\001" +
    "\002\000\004\212\201\001\002\000\016\004\uff45\006\uff45" +
    "\010\uff45\011\uff45\012\uff45\127\uff45\001\002\000\004\212" +
    "\201\001\002\000\016\004\uff47\006\uff47\010\uff47\011\uff47" +
    "\012\uff47\127\uff47\001\002\000\016\004\uff43\006\uff43\010" +
    "\uff43\011\uff43\012\uff43\127\uff43\001\002\000\006\206\242" +
    "\210\225\001\002\000\016\004\uff49\006\uff49\010\uff49\011" +
    "\uff49\012\uff49\127\uff49\001\002\000\004\210\225\001\002" +
    "\000\016\004\uff44\006\uff44\010\uff44\011\uff44\012\uff44\127" +
    "\uff44\001\002\000\016\004\uff63\006\uff63\010\uff63\011\uff63" +
    "\012\uff63\127\uff63\001\002\000\016\004\uff4c\006\uff4c\010" +
    "\uff4c\011\uff4c\012\uff4c\127\uff4c\001\002\000\004\212\240" +
    "\001\002\000\016\004\uff41\006\uff41\010\uff41\011\uff41\012" +
    "\uff41\127\uff41\001\002\000\004\210\237\001\002\000\004" +
    "\210\236\001\002\000\016\004\uff46\006\uff46\010\uff46\011" +
    "\uff46\012\uff46\127\uff46\001\002\000\004\212\201\001\002" +
    "\000\016\004\uff50\006\uff50\010\uff50\011\uff50\012\uff50\127" +
    "\uff50\001\002\000\004\212\201\001\002\000\004\210\225" +
    "\001\002\000\004\210\225\001\002\000\016\004\uff40\006" +
    "\uff40\010\uff40\011\uff40\012\uff40\127\uff40\001\002\000\006" +
    "\210\212\211\213\001\002\000\016\004\uff48\006\uff48\010" +
    "\uff48\011\uff48\012\uff48\127\uff48\001\002\000\126\005\141" +
    "\013\144\014\202\015\170\016\203\017\174\020\153\021" +
    "\163\022\154\023\147\024\175\025\145\026\133\041\172" +
    "\042\162\043\165\044\132\045\156\046\135\047\167\050" +
    "\177\051\200\052\171\053\151\055\134\057\140\060\204" +
    "\061\207\062\161\071\142\072\155\073\176\100\146\120" +
    "\173\142\136\143\164\165\152\166\166\167\157\170\150" +
    "\207\205\212\201\001\002\000\126\005\141\013\144\014" +
    "\202\015\170\016\203\017\174\020\153\021\163\022\154" +
    "\023\147\024\175\025\145\026\133\041\172\042\162\043" +
    "\165\044\132\045\156\046\135\047\167\050\177\051\200" +
    "\052\171\053\151\055\134\057\140\060\204\061\207\062" +
    "\161\071\142\072\155\073\176\100\146\120\173\142\136" +
    "\143\164\165\152\166\166\167\157\170\150\207\205\212" +
    "\201\001\002\000\020\004\uff34\006\uff34\010\uff34\011\uff34" +
    "\012\uff34\127\uff34\212\uff34\001\002\000\016\004\uff51\006" +
    "\uff51\010\uff51\011\uff51\012\uff51\127\uff51\001\002\000\016" +
    "\004\uff4b\006\uff4b\010\uff4b\011\uff4b\012\uff4b\127\uff4b\001" +
    "\002\000\016\004\uff4f\006\uff4f\010\uff4f\011\uff4f\012\uff4f" +
    "\127\uff4f\001\002\000\004\206\211\001\002\000\020\004" +
    "\uff39\006\uff39\010\uff39\011\uff39\012\uff39\127\uff39\212\210" +
    "\001\002\000\016\004\uff4d\006\uff4d\010\uff4d\011\uff4d\012" +
    "\uff4d\127\uff4d\001\002\000\020\004\uff33\006\uff33\010\uff33" +
    "\011\uff33\012\uff33\127\uff33\212\uff33\001\002\000\006\210" +
    "\212\211\213\001\002\000\150\004\uff32\005\uff32\006\uff32" +
    "\010\uff32\011\uff32\012\uff32\013\uff32\014\uff32\015\uff32\016" +
    "\uff32\017\uff32\020\uff32\021\uff32\022\uff32\023\uff32\024\uff32" +
    "\025\uff32\026\uff32\041\uff32\042\uff32\043\uff32\044\uff32\045" +
    "\uff32\046\uff32\047\uff32\050\uff32\051\uff32\052\uff32\053\uff32" +
    "\055\uff32\056\uff32\057\uff32\060\uff32\061\uff32\062\uff32\071" +
    "\uff32\072\uff32\073\uff32\100\uff32\120\uff32\127\uff32\142\uff32" +
    "\143\uff32\165\uff32\166\uff32\167\uff32\170\uff32\207\uff32\210" +
    "\uff32\211\uff32\212\uff32\001\002\000\150\004\uff31\005\uff31" +
    "\006\uff31\010\uff31\011\uff31\012\uff31\013\uff31\014\uff31\015" +
    "\uff31\016\uff31\017\uff31\020\uff31\021\uff31\022\uff31\023\uff31" +
    "\024\uff31\025\uff31\026\uff31\041\uff31\042\uff31\043\uff31\044" +
    "\uff31\045\uff31\046\uff31\047\uff31\050\uff31\051\uff31\052\uff31" +
    "\053\uff31\055\uff31\056\uff31\057\uff31\060\uff31\061\uff31\062" +
    "\uff31\071\uff31\072\uff31\073\uff31\100\uff31\120\uff31\127\uff31" +
    "\142\uff31\143\uff31\165\uff31\166\uff31\167\uff31\170\uff31\207" +
    "\uff31\210\uff31\211\uff31\212\uff31\001\002\000\016\004\uff3b" +
    "\006\uff3b\010\uff3b\011\uff3b\012\uff3b\127\uff3b\001\002\000" +
    "\016\004\uff5a\006\uff5a\010\uff5a\011\216\012\217\127\uff5a" +
    "\001\002\000\126\005\141\013\144\014\202\015\170\016" +
    "\203\017\174\020\153\021\163\022\154\023\147\024\175" +
    "\025\145\026\133\041\172\042\162\043\165\044\132\045" +
    "\156\046\135\047\167\050\177\051\200\052\171\053\151" +
    "\055\134\057\140\060\204\061\207\062\161\071\142\072" +
    "\155\073\176\100\146\120\173\142\136\143\164\165\152" +
    "\166\166\167\157\170\150\207\205\212\201\001\002\000" +
    "\126\005\141\013\144\014\202\015\170\016\203\017\174" +
    "\020\153\021\163\022\154\023\147\024\175\025\145\026" +
    "\133\041\172\042\162\043\165\044\132\045\156\046\135" +
    "\047\167\050\177\051\200\052\171\053\151\055\134\057" +
    "\140\060\204\061\207\062\161\071\142\072\155\073\176" +
    "\100\146\120\173\142\136\143\164\165\152\166\166\167" +
    "\157\170\150\207\205\212\201\001\002\000\016\004\uff60" +
    "\006\uff60\010\uff60\011\uff60\012\uff60\127\uff60\001\002\000" +
    "\016\004\uff61\006\uff61\010\uff61\011\uff61\012\217\127\uff61" +
    "\001\002\000\016\004\uff5e\006\uff5e\010\uff5e\011\216\012" +
    "\217\127\uff5e\001\002\000\126\005\141\013\144\014\202" +
    "\015\170\016\203\017\174\020\153\021\163\022\154\023" +
    "\147\024\175\025\145\026\133\041\172\042\162\043\165" +
    "\044\132\045\156\046\135\047\167\050\177\051\200\052" +
    "\171\053\151\055\134\057\140\060\204\061\207\062\161" +
    "\071\142\072\155\073\176\100\146\120\173\142\136\143" +
    "\164\165\152\166\166\167\157\170\150\207\205\212\201" +
    "\001\002\000\016\004\uff5b\006\uff5b\010\uff5b\011\216\012" +
    "\217\127\uff5b\001\002\000\020\004\uff2c\006\uff2c\010\uff2c" +
    "\011\uff2c\012\uff2c\127\231\210\uff2c\001\002\000\020\004" +
    "\uff56\006\uff56\010\uff56\011\uff56\012\uff56\127\uff56\210\225" +
    "\001\002\000\020\004\uff30\006\uff30\010\uff30\011\uff30\012" +
    "\uff30\127\uff30\210\uff30\001\002\000\020\004\uff2f\006\uff2f" +
    "\010\uff2f\011\uff2f\012\uff2f\127\uff2f\210\uff2f\001\002\000" +
    "\004\210\232\001\002\000\020\004\uff2b\006\uff2b\010\uff2b" +
    "\011\uff2b\012\uff2b\127\uff2b\210\uff2b\001\002\000\020\004" +
    "\uff55\006\uff55\010\uff55\011\uff55\012\uff55\127\uff55\210\225" +
    "\001\002\000\020\004\uff3d\006\uff3d\010\uff3d\011\uff3d\012" +
    "\uff3d\127\uff3d\212\210\001\002\000\020\004\uff3f\006\uff3f" +
    "\010\uff3f\011\uff3f\012\uff3f\127\uff3f\212\210\001\002\000" +
    "\016\004\uff54\006\uff54\010\uff54\011\uff54\012\uff54\127\uff54" +
    "\001\002\000\016\004\uff35\006\uff35\010\uff35\011\uff35\012" +
    "\uff35\127\uff35\001\002\000\016\004\uff37\006\uff37\010\uff37" +
    "\011\uff37\012\uff37\127\uff37\001\002\000\020\004\uff53\006" +
    "\uff53\010\uff53\011\uff53\012\uff53\127\uff53\210\225\001\002" +
    "\000\006\210\212\211\213\001\002\000\020\004\uff58\006" +
    "\uff58\010\uff58\011\uff58\012\uff58\127\uff58\210\225\001\002" +
    "\000\016\004\uff3a\006\uff3a\010\uff3a\011\uff3a\012\uff3a\127" +
    "\uff3a\001\002\000\020\004\uff3c\006\uff3c\010\uff3c\011\uff3c" +
    "\012\uff3c\127\uff3c\212\210\001\002\000\020\004\uff57\006" +
    "\uff57\010\uff57\011\uff57\012\uff57\127\uff57\212\210\001\002" +
    "\000\016\004\uff5d\006\uff5d\010\uff5d\011\216\012\217\127" +
    "\uff5d\001\002\000\016\004\uff5f\006\uff5f\010\uff5f\011\216" +
    "\012\217\127\uff5f\001\002\000\010\006\252\011\216\012" +
    "\217\001\002\000\016\004\uff62\006\uff62\010\uff62\011\uff62" +
    "\012\uff62\127\uff62\001\002\000\020\004\uff38\006\uff38\010" +
    "\uff38\011\uff38\012\uff38\127\uff38\212\210\001\002\000\020" +
    "\004\uff3e\006\uff3e\010\uff3e\011\uff3e\012\uff3e\127\uff3e\212" +
    "\210\001\002\000\004\056\256\001\002\000\132\005\141" +
    "\013\144\014\202\015\170\016\203\017\174\020\153\021" +
    "\163\022\154\023\147\024\175\025\145\026\133\041\172" +
    "\042\162\043\165\044\132\045\156\046\135\047\167\050" +
    "\177\051\200\052\171\053\151\055\134\057\140\060\204" +
    "\061\207\062\161\071\142\072\155\073\176\100\146\120" +
    "\173\142\136\143\164\165\152\166\166\167\157\170\150" +
    "\207\205\210\212\211\213\212\201\001\002\000\016\004" +
    "\uff5c\006\uff5c\010\uff5c\011\216\012\217\127\uff5c\001\002" +
    "\000\006\210\212\211\213\001\002\000\006\210\212\211" +
    "\213\001\002\000\016\004\uff59\006\uff59\010\uff59\011\uff59" +
    "\012\uff59\127\uff59\001\002\000\016\004\uff52\006\uff52\010" +
    "\uff52\011\uff52\012\uff52\127\uff52\001\002\000\004\212\267" +
    "\001\002\000\004\212\266\001\002\000\004\004\uffd7\001" +
    "\002\000\004\004\uffd6\001\002\000\136\004\uff6c\005\uff6c" +
    "\013\uff6c\014\uff6c\015\uff6c\016\uff6c\017\uff6c\020\uff6c\021" +
    "\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c\026\uff6c\041\uff6c" +
    "\042\uff6c\043\uff6c\044\uff6c\045\uff6c\046\uff6c\047\uff6c\050" +
    "\uff6c\051\uff6c\052\uff6c\053\uff6c\055\uff6c\057\uff6c\060\uff6c" +
    "\061\uff6c\062\uff6c\071\uff6c\072\uff6c\073\uff6c\100\uff6c\120" +
    "\uff6c\142\uff6c\143\uff6c\165\uff6c\166\uff6c\167\uff6c\170\uff6c" +
    "\203\uff6c\207\uff6c\210\uff6c\211\uff6c\212\uff6c\001\002\000" +
    "\136\004\uff6d\005\uff6d\013\uff6d\014\uff6d\015\uff6d\016\uff6d" +
    "\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d\025" +
    "\uff6d\026\uff6d\041\uff6d\042\uff6d\043\uff6d\044\uff6d\045\uff6d" +
    "\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d\055" +
    "\uff6d\057\uff6d\060\uff6d\061\uff6d\062\uff6d\071\uff6d\072\uff6d" +
    "\073\uff6d\100\uff6d\120\uff6d\142\uff6d\143\uff6d\165\uff6d\166" +
    "\uff6d\167\uff6d\170\uff6d\203\273\207\uff6d\210\uff6d\211\uff6d" +
    "\212\uff6d\001\002\000\004\004\uff93\001\002\000\016\007" +
    "\300\204\277\205\301\210\274\211\276\212\275\001\002" +
    "\000\136\004\uff69\005\uff69\013\uff69\014\uff69\015\uff69\016" +
    "\uff69\017\uff69\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69" +
    "\025\uff69\026\uff69\041\uff69\042\uff69\043\uff69\044\uff69\045" +
    "\uff69\046\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69" +
    "\055\uff69\057\uff69\060\uff69\061\uff69\062\uff69\071\uff69\072" +
    "\uff69\073\uff69\100\uff69\120\uff69\142\uff69\143\uff69\165\uff69" +
    "\166\uff69\167\uff69\170\uff69\203\uff69\207\uff69\210\uff69\211" +
    "\uff69\212\uff69\001\002\000\136\004\uff6a\005\uff6a\013\uff6a" +
    "\014\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a\022" +
    "\uff6a\023\uff6a\024\uff6a\025\uff6a\026\uff6a\041\uff6a\042\uff6a" +
    "\043\uff6a\044\uff6a\045\uff6a\046\uff6a\047\uff6a\050\uff6a\051" +
    "\uff6a\052\uff6a\053\uff6a\055\uff6a\057\uff6a\060\uff6a\061\uff6a" +
    "\062\uff6a\071\uff6a\072\uff6a\073\uff6a\100\uff6a\120\uff6a\142" +
    "\uff6a\143\uff6a\165\uff6a\166\uff6a\167\uff6a\170\uff6a\203\uff6a" +
    "\207\uff6a\210\uff6a\211\uff6a\212\uff6a\001\002\000\136\004" +
    "\uff68\005\uff68\013\uff68\014\uff68\015\uff68\016\uff68\017\uff68" +
    "\020\uff68\021\uff68\022\uff68\023\uff68\024\uff68\025\uff68\026" +
    "\uff68\041\uff68\042\uff68\043\uff68\044\uff68\045\uff68\046\uff68" +
    "\047\uff68\050\uff68\051\uff68\052\uff68\053\uff68\055\uff68\057" +
    "\uff68\060\uff68\061\uff68\062\uff68\071\uff68\072\uff68\073\uff68" +
    "\100\uff68\120\uff68\142\uff68\143\uff68\165\uff68\166\uff68\167" +
    "\uff68\170\uff68\203\uff68\207\uff68\210\uff68\211\uff68\212\uff68" +
    "\001\002\000\136\004\uff66\005\uff66\013\uff66\014\uff66\015" +
    "\uff66\016\uff66\017\uff66\020\uff66\021\uff66\022\uff66\023\uff66" +
    "\024\uff66\025\uff66\026\uff66\041\uff66\042\uff66\043\uff66\044" +
    "\uff66\045\uff66\046\uff66\047\uff66\050\uff66\051\uff66\052\uff66" +
    "\053\uff66\055\uff66\057\uff66\060\uff66\061\uff66\062\uff66\071" +
    "\uff66\072\uff66\073\uff66\100\uff66\120\uff66\142\uff66\143\uff66" +
    "\165\uff66\166\uff66\167\uff66\170\uff66\203\uff66\207\uff66\210" +
    "\uff66\211\uff66\212\uff66\001\002\000\126\005\141\013\144" +
    "\014\202\015\170\016\203\017\174\020\153\021\163\022" +
    "\154\023\147\024\175\025\145\026\133\041\172\042\162" +
    "\043\165\044\132\045\156\046\135\047\167\050\177\051" +
    "\200\052\171\053\151\055\134\057\140\060\204\061\207" +
    "\062\161\071\142\072\155\073\176\100\146\120\173\142" +
    "\136\143\164\165\152\166\166\167\157\170\150\207\205" +
    "\212\201\001\002\000\136\004\uff65\005\uff65\013\uff65\014" +
    "\uff65\015\uff65\016\uff65\017\uff65\020\uff65\021\uff65\022\uff65" +
    "\023\uff65\024\uff65\025\uff65\026\uff65\041\uff65\042\uff65\043" +
    "\uff65\044\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65" +
    "\052\uff65\053\uff65\055\uff65\057\uff65\060\uff65\061\uff65\062" +
    "\uff65\071\uff65\072\uff65\073\uff65\100\uff65\120\uff65\142\uff65" +
    "\143\uff65\165\uff65\166\uff65\167\uff65\170\uff65\203\uff65\207" +
    "\uff65\210\uff65\211\uff65\212\uff65\001\002\000\004\010\303" +
    "\001\002\000\136\004\uff67\005\uff67\013\uff67\014\uff67\015" +
    "\uff67\016\uff67\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67" +
    "\024\uff67\025\uff67\026\uff67\041\uff67\042\uff67\043\uff67\044" +
    "\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67\052\uff67" +
    "\053\uff67\055\uff67\057\uff67\060\uff67\061\uff67\062\uff67\071" +
    "\uff67\072\uff67\073\uff67\100\uff67\120\uff67\142\uff67\143\uff67" +
    "\165\uff67\166\uff67\167\uff67\170\uff67\203\uff67\207\uff67\210" +
    "\uff67\211\uff67\212\uff67\001\002\000\136\004\uff6b\005\uff6b" +
    "\013\uff6b\014\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021" +
    "\uff6b\022\uff6b\023\uff6b\024\uff6b\025\uff6b\026\uff6b\041\uff6b" +
    "\042\uff6b\043\uff6b\044\uff6b\045\uff6b\046\uff6b\047\uff6b\050" +
    "\uff6b\051\uff6b\052\uff6b\053\uff6b\055\uff6b\057\uff6b\060\uff6b" +
    "\061\uff6b\062\uff6b\071\uff6b\072\uff6b\073\uff6b\100\uff6b\120" +
    "\uff6b\142\uff6b\143\uff6b\165\uff6b\166\uff6b\167\uff6b\170\uff6b" +
    "\203\uff6b\207\uff6b\210\uff6b\211\uff6b\212\uff6b\001\002\000" +
    "\126\005\141\013\144\014\202\015\170\016\203\017\174" +
    "\020\153\021\163\022\154\023\147\024\175\025\145\026" +
    "\133\041\172\042\162\043\165\044\132\045\156\046\135" +
    "\047\167\050\177\051\200\052\171\053\151\055\134\057" +
    "\140\060\204\061\207\062\161\071\142\072\155\073\176" +
    "\100\146\120\173\142\136\143\164\165\152\166\166\167" +
    "\157\170\150\207\205\212\201\001\002\000\004\004\uffbf" +
    "\001\002\000\004\004\uffb2\001\002\000\004\004\uff98\001" +
    "\002\000\006\210\212\211\213\001\002\000\010\004\uff97" +
    "\210\212\211\213\001\002\000\010\004\uff2e\210\uff2e\211" +
    "\uff2e\001\002\000\010\004\uff2d\210\uff2d\211\uff2d\001\002" +
    "\000\004\004\uffe0\001\002\000\126\005\141\013\144\014" +
    "\202\015\170\016\203\017\174\020\153\021\163\022\154" +
    "\023\147\024\175\025\145\026\133\041\172\042\162\043" +
    "\165\044\132\045\156\046\135\047\167\050\177\051\200" +
    "\052\171\053\151\055\134\057\140\060\204\061\207\062" +
    "\161\071\142\072\155\073\176\100\146\120\173\142\136" +
    "\143\164\165\152\166\166\167\157\170\150\207\205\212" +
    "\201\001\002\000\004\004\uffbc\001\002\000\004\004\uffa1" +
    "\001\002\000\004\004\uffe2\001\002\000\004\004\uff96\001" +
    "\002\000\004\127\327\001\002\000\004\004\uffa9\001\002" +
    "\000\004\004\uffa8\001\002\000\014\004\uffa7\011\uff34\012" +
    "\uff34\127\uff34\212\uff34\001\002\000\126\005\141\013\144" +
    "\014\202\015\170\016\203\017\174\020\153\021\163\022" +
    "\154\023\147\024\175\025\145\026\133\041\172\042\162" +
    "\043\165\044\132\045\156\046\135\047\167\050\177\051" +
    "\200\052\171\053\151\055\134\057\140\060\204\061\207" +
    "\062\161\071\142\072\155\073\176\100\146\120\173\142" +
    "\136\143\164\165\152\166\166\167\157\170\150\207\205" +
    "\212\201\001\002\000\004\004\uffaa\001\002\000\004\212" +
    "\332\001\002\000\004\212\333\001\002\000\126\005\141" +
    "\013\144\014\202\015\170\016\203\017\174\020\153\021" +
    "\163\022\154\023\147\024\175\025\145\026\133\041\172" +
    "\042\162\043\165\044\132\045\156\046\135\047\167\050" +
    "\177\051\200\052\171\053\151\055\134\057\140\060\204" +
    "\061\207\062\161\071\142\072\155\073\176\100\146\120" +
    "\173\142\136\143\164\165\152\166\166\167\157\170\150" +
    "\207\205\212\201\001\002\000\004\004\uffb8\001\002\000" +
    "\126\005\141\013\144\014\202\015\170\016\203\017\174" +
    "\020\153\021\163\022\154\023\147\024\175\025\145\026" +
    "\133\041\172\042\162\043\165\044\132\045\156\046\135" +
    "\047\167\050\177\051\200\052\171\053\151\055\134\057" +
    "\140\060\204\061\207\062\161\071\142\072\155\073\176" +
    "\100\146\120\173\142\136\143\164\165\152\166\166\167" +
    "\157\170\150\207\205\212\201\001\002\000\004\004\uffc1" +
    "\001\002\000\004\210\340\001\002\000\126\005\141\013" +
    "\144\014\202\015\170\016\203\017\174\020\153\021\163" +
    "\022\154\023\147\024\175\025\145\026\133\041\172\042" +
    "\162\043\165\044\132\045\156\046\135\047\167\050\177" +
    "\051\200\052\171\053\151\055\134\057\140\060\204\061" +
    "\207\062\161\071\142\072\155\073\176\100\146\120\173" +
    "\142\136\143\164\165\152\166\166\167\157\170\150\207" +
    "\205\212\201\001\002\000\004\004\uffc2\001\002\000\126" +
    "\005\141\013\144\014\202\015\170\016\203\017\174\020" +
    "\153\021\163\022\154\023\147\024\175\025\145\026\133" +
    "\041\172\042\162\043\165\044\132\045\156\046\135\047" +
    "\167\050\177\051\200\052\171\053\151\055\134\057\140" +
    "\060\204\061\207\062\161\071\142\072\155\073\176\100" +
    "\146\120\173\142\136\143\164\165\152\166\166\167\157" +
    "\170\150\207\205\212\201\001\002\000\004\004\uffb1\001" +
    "\002\000\004\004\uffac\001\002\000\126\005\141\013\144" +
    "\014\202\015\170\016\203\017\174\020\153\021\163\022" +
    "\154\023\147\024\175\025\145\026\133\041\172\042\162" +
    "\043\165\044\132\045\156\046\135\047\167\050\177\051" +
    "\200\052\171\053\151\055\134\057\140\060\204\061\207" +
    "\062\161\071\142\072\155\073\176\100\146\120\173\142" +
    "\136\143\164\165\152\166\166\167\157\170\150\207\205" +
    "\212\201\001\002\000\004\004\uff92\001\002\000\126\005" +
    "\141\013\144\014\202\015\170\016\203\017\174\020\153" +
    "\021\163\022\154\023\147\024\175\025\145\026\133\041" +
    "\172\042\162\043\165\044\132\045\156\046\135\047\167" +
    "\050\177\051\200\052\171\053\151\055\134\057\140\060" +
    "\204\061\207\062\161\071\142\072\155\073\176\100\146" +
    "\120\173\142\136\143\164\165\152\166\166\167\157\170" +
    "\150\207\205\212\201\001\002\000\004\004\uffba\001\002" +
    "\000\012\111\353\112\355\113\356\212\354\001\002\000" +
    "\004\004\uffa5\001\002\000\130\004\uff71\005\uff71\013\uff71" +
    "\014\uff71\015\uff71\016\uff71\017\uff71\020\uff71\021\uff71\022" +
    "\uff71\023\uff71\024\uff71\025\uff71\026\uff71\041\uff71\042\uff71" +
    "\043\uff71\044\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051" +
    "\uff71\052\uff71\053\uff71\055\uff71\057\uff71\060\uff71\061\uff71" +
    "\062\uff71\071\uff71\072\uff71\073\uff71\100\uff71\120\uff71\142" +
    "\uff71\143\uff71\165\uff71\166\uff71\167\uff71\170\uff71\207\uff71" +
    "\212\uff71\001\002\000\004\004\uffa2\001\002\000\130\004" +
    "\uff70\005\uff70\013\uff70\014\uff70\015\uff70\016\uff70\017\uff70" +
    "\020\uff70\021\uff70\022\uff70\023\uff70\024\uff70\025\uff70\026" +
    "\uff70\041\uff70\042\uff70\043\uff70\044\uff70\045\uff70\046\uff70" +
    "\047\uff70\050\uff70\051\uff70\052\uff70\053\uff70\055\uff70\057" +
    "\uff70\060\uff70\061\uff70\062\uff70\071\uff70\072\uff70\073\uff70" +
    "\100\uff70\120\uff70\142\uff70\143\uff70\165\uff70\166\uff70\167" +
    "\uff70\170\uff70\207\uff70\212\uff70\001\002\000\130\004\uff6f" +
    "\005\uff6f\013\uff6f\014\uff6f\015\uff6f\016\uff6f\017\uff6f\020" +
    "\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f" +
    "\041\uff6f\042\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047" +
    "\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\055\uff6f\057\uff6f" +
    "\060\uff6f\061\uff6f\062\uff6f\071\uff6f\072\uff6f\073\uff6f\100" +
    "\uff6f\120\uff6f\142\uff6f\143\uff6f\165\uff6f\166\uff6f\167\uff6f" +
    "\170\uff6f\207\uff6f\212\uff6f\001\002\000\004\004\uffe5\001" +
    "\002\000\004\004\uff9f\001\002\000\126\005\141\013\144" +
    "\014\202\015\170\016\203\017\174\020\153\021\163\022" +
    "\154\023\147\024\175\025\145\026\133\041\172\042\162" +
    "\043\165\044\132\045\156\046\135\047\167\050\177\051" +
    "\200\052\171\053\151\055\134\057\140\060\204\061\207" +
    "\062\161\071\142\072\155\073\176\100\146\120\173\142" +
    "\136\143\164\165\152\166\166\167\157\170\150\207\205" +
    "\212\201\001\002\000\126\005\141\013\144\014\202\015" +
    "\170\016\203\017\174\020\153\021\163\022\154\023\147" +
    "\024\175\025\145\026\133\041\172\042\162\043\165\044" +
    "\132\045\156\046\135\047\167\050\177\051\200\052\171" +
    "\053\151\055\134\057\140\060\204\061\207\062\161\071" +
    "\142\072\155\073\176\100\146\120\173\142\136\143\164" +
    "\165\152\166\166\167\157\170\150\207\205\212\201\001" +
    "\002\000\004\004\uffae\001\002\000\004\004\uffaf\001\002" +
    "\000\004\004\uff9b\001\002\000\004\004\uff94\001\002\000" +
    "\004\004\uff99\001\002\000\004\212\u010c\001\002\000\012" +
    "\004\uff6e\114\374\134\376\203\273\001\002\000\004\212" +
    "\373\001\002\000\004\004\uffd4\001\002\000\126\005\141" +
    "\013\144\014\202\015\170\016\203\017\174\020\153\021" +
    "\163\022\154\023\147\024\175\025\145\026\133\041\172" +
    "\042\162\043\165\044\132\045\156\046\135\047\167\050" +
    "\177\051\200\052\171\053\151\055\134\057\140\060\204" +
    "\061\207\062\161\071\142\072\155\073\176\100\146\120" +
    "\173\142\136\143\164\165\152\166\166\167\157\170\150" +
    "\207\205\212\201\001\002\000\004\004\uffcb\001\002\000" +
    "\004\210\377\001\002\000\026\040\u0101\101\u0103\102\u0100" +
    "\111\353\112\355\113\356\147\u0104\210\212\211\213\212" +
    "\u0105\001\002\000\004\212\u010a\001\002\000\006\210\212" +
    "\211\213\001\002\000\004\004\uffd3\001\002\000\010\111" +
    "\353\112\355\113\356\001\002\000\004\210\u0107\001\002" +
    "\000\004\004\uffd2\001\002\000\004\004\uffcc\001\002\000" +
    "\004\004\uffce\001\002\000\004\004\uffd0\001\002\000\004" +
    "\004\uffcf\001\002\000\004\004\uffd1\001\002\000\004\004" +
    "\uffcd\001\002\000\004\212\u010d\001\002\000\004\004\uffd5" +
    "\001\002\000\202\002\ufffe\004\ufffe\033\ufffe\034\ufffe\035" +
    "\ufffe\036\ufffe\037\ufffe\052\ufffe\054\ufffe\063\ufffe\064\ufffe" +
    "\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\074\ufffe\075" +
    "\ufffe\076\ufffe\102\ufffe\103\ufffe\104\ufffe\105\ufffe\106\ufffe" +
    "\107\ufffe\110\ufffe\114\ufffe\115\ufffe\116\ufffe\117\ufffe\123" +
    "\ufffe\124\ufffe\125\ufffe\126\ufffe\131\ufffe\132\ufffe\133\ufffe" +
    "\135\ufffe\136\ufffe\137\ufffe\140\ufffe\141\ufffe\144\ufffe\145" +
    "\ufffe\146\ufffe\147\ufffe\157\ufffe\160\ufffe\161\ufffe\162\ufffe" +
    "\163\ufffe\164\ufffe\171\ufffe\172\ufffe\173\ufffe\174\ufffe\175" +
    "\ufffe\176\ufffe\177\ufffe\200\ufffe\201\ufffe\202\ufffe\207\ufffe" +
    "\212\ufffe\001\002\000\004\212\u0110\001\002\000\006\004" +
    "\uff8f\212\u0111\001\002\000\004\004\uff90\001\002\000\126" +
    "\005\141\013\144\014\202\015\170\016\203\017\174\020" +
    "\153\021\163\022\154\023\147\024\175\025\145\026\133" +
    "\041\172\042\162\043\165\044\132\045\156\046\135\047" +
    "\167\050\177\051\200\052\171\053\151\055\134\057\140" +
    "\060\204\061\207\062\161\071\142\072\155\073\176\100" +
    "\146\120\173\142\136\143\164\165\152\166\166\167\157" +
    "\170\150\207\205\212\201\001\002\000\004\004\uffbe\001" +
    "\002\000\004\004\uffa0\001\002\000\004\212\u0116\001\002" +
    "\000\004\212\u0117\001\002\000\126\005\141\013\144\014" +
    "\202\015\170\016\203\017\174\020\153\021\163\022\154" +
    "\023\147\024\175\025\145\026\133\041\172\042\162\043" +
    "\165\044\132\045\156\046\135\047\167\050\177\051\200" +
    "\052\171\053\151\055\134\057\140\060\204\061\207\062" +
    "\161\071\142\072\155\073\176\100\146\120\173\142\136" +
    "\143\164\165\152\166\166\167\157\170\150\207\205\212" +
    "\201\001\002\000\004\004\uffb9\001\002\000\126\005\141" +
    "\013\144\014\202\015\170\016\203\017\174\020\153\021" +
    "\163\022\154\023\147\024\175\025\145\026\133\041\172" +
    "\042\162\043\165\044\132\045\156\046\135\047\167\050" +
    "\177\051\200\052\171\053\151\055\134\057\140\060\204" +
    "\061\207\062\161\071\142\072\155\073\176\100\146\120" +
    "\173\142\136\143\164\165\152\166\166\167\157\170\150" +
    "\207\205\212\201\001\002\000\004\004\uffb0\001\002\000" +
    "\004\004\uffa3\001\002\000\004\004\uffdf\001\002\000\126" +
    "\005\141\013\144\014\202\015\170\016\203\017\174\020" +
    "\153\021\163\022\154\023\147\024\175\025\145\026\133" +
    "\041\172\042\162\043\165\044\132\045\156\046\135\047" +
    "\167\050\177\051\200\052\171\053\151\055\134\057\140" +
    "\060\204\061\207\062\161\071\142\072\155\073\176\100" +
    "\146\120\173\142\136\143\164\165\152\166\166\167\157" +
    "\170\150\207\205\212\201\001\002\000\004\004\uffc0\001" +
    "\002\000\126\005\141\013\144\014\202\015\170\016\203" +
    "\017\174\020\153\021\163\022\154\023\147\024\175\025" +
    "\145\026\133\041\172\042\162\043\165\044\132\045\156" +
    "\046\135\047\167\050\177\051\200\052\171\053\151\055" +
    "\134\057\140\060\204\061\207\062\161\071\142\072\155" +
    "\073\176\100\146\120\173\142\136\143\164\165\152\166" +
    "\166\167\157\170\150\207\205\212\201\001\002\000\004" +
    "\004\uff91\001\002\000\004\004\uffe7\001\002\000\004\212" +
    "\u0123\001\002\000\126\005\141\013\144\014\202\015\170" +
    "\016\203\017\174\020\153\021\163\022\154\023\147\024" +
    "\175\025\145\026\133\041\172\042\162\043\165\044\132" +
    "\045\156\046\135\047\167\050\177\051\200\052\171\053" +
    "\151\055\134\057\140\060\204\061\207\062\161\071\142" +
    "\072\155\073\176\100\146\120\173\142\136\143\164\165" +
    "\152\166\166\167\157\170\150\207\205\212\201\001\002" +
    "\000\004\004\uffa4\001\002\000\126\005\141\013\144\014" +
    "\202\015\170\016\203\017\174\020\153\021\163\022\154" +
    "\023\147\024\175\025\145\026\133\041\172\042\162\043" +
    "\165\044\132\045\156\046\135\047\167\050\177\051\200" +
    "\052\171\053\151\055\134\057\140\060\204\061\207\062" +
    "\161\071\142\072\155\073\176\100\146\120\173\142\136" +
    "\143\164\165\152\166\166\167\157\170\150\207\205\212" +
    "\201\001\002\000\004\004\uffbd\001\002\000\004\212\u0151" +
    "\001\002\000\026\004\uff6e\040\u0130\070\u0133\102\u012e\114" +
    "\u0132\145\u012f\147\u0135\155\u0136\156\u0134\203\273\001\002" +
    "\000\004\212\u012c\001\002\000\004\212\u012b\001\002\000" +
    "\004\004\uff8d\001\002\000\010\111\353\112\355\113\356" +
    "\001\002\000\004\004\uff8b\001\002\000\004\212\u0150\001" +
    "\002\000\016\124\u013f\151\u0141\152\u013e\153\u0142\154\u0140" +
    "\212\u013d\001\002\000\006\210\212\211\213\001\002\000" +
    "\004\004\uff7b\001\002\000\004\212\u013b\001\002\000\010" +
    "\111\353\112\355\113\356\001\002\000\004\212\u0139\001" +
    "\002\000\004\210\u0138\001\002\000\010\111\353\112\355" +
    "\113\356\001\002\000\004\004\uff89\001\002\000\004\004" +
    "\uff7f\001\002\000\004\004\uff7d\001\002\000\004\004\uff8a" +
    "\001\002\000\004\004\uff7e\001\002\000\004\004\uff80\001" +
    "\002\000\010\004\uff88\210\212\211\213\001\002\000\004" +
    "\212\u014b\001\002\000\004\212\u0149\001\002\000\004\212" +
    "\u0146\001\002\000\004\004\uff7c\001\002\000\004\212\u0143" +
    "\001\002\000\006\210\212\211\213\001\002\000\126\005" +
    "\141\013\144\014\202\015\170\016\203\017\174\020\153" +
    "\021\163\022\154\023\147\024\175\025\145\026\133\041" +
    "\172\042\162\043\165\044\132\045\156\046\135\047\167" +
    "\050\177\051\200\052\171\053\151\055\134\057\140\060" +
    "\204\061\207\062\161\071\142\072\155\073\176\100\146" +
    "\120\173\142\136\143\164\165\152\166\166\167\157\170" +
    "\150\207\205\212\201\001\002\000\004\004\uff83\001\002" +
    "\000\006\210\212\211\213\001\002\000\126\005\141\013" +
    "\144\014\202\015\170\016\203\017\174\020\153\021\163" +
    "\022\154\023\147\024\175\025\145\026\133\041\172\042" +
    "\162\043\165\044\132\045\156\046\135\047\167\050\177" +
    "\051\200\052\171\053\151\055\134\057\140\060\204\061" +
    "\207\062\161\071\142\072\155\073\176\100\146\120\173" +
    "\142\136\143\164\165\152\166\166\167\157\170\150\207" +
    "\205\212\201\001\002\000\004\004\uff82\001\002\000\126" +
    "\005\141\013\144\014\202\015\170\016\203\017\174\020" +
    "\153\021\163\022\154\023\147\024\175\025\145\026\133" +
    "\041\172\042\162\043\165\044\132\045\156\046\135\047" +
    "\167\050\177\051\200\052\171\053\151\055\134\057\140" +
    "\060\204\061\207\062\161\071\142\072\155\073\176\100" +
    "\146\120\173\142\136\143\164\165\152\166\166\167\157" +
    "\170\150\207\205\212\201\001\002\000\004\004\uff85\001" +
    "\002\000\006\210\212\211\213\001\002\000\126\005\141" +
    "\013\144\014\202\015\170\016\203\017\174\020\153\021" +
    "\163\022\154\023\147\024\175\025\145\026\133\041\172" +
    "\042\162\043\165\044\132\045\156\046\135\047\167\050" +
    "\177\051\200\052\171\053\151\055\134\057\140\060\204" +
    "\061\207\062\161\071\142\072\155\073\176\100\146\120" +
    "\173\142\136\143\164\165\152\166\166\167\157\170\150" +
    "\207\205\212\201\001\002\000\004\004\uff84\001\002\000" +
    "\010\004\uff86\210\212\211\213\001\002\000\004\004\uff87" +
    "\001\002\000\004\004\uff81\001\002\000\004\212\u0152\001" +
    "\002\000\004\004\uff8c\001\002\000\004\004\uffa6\001\002" +
    "\000\004\004\uffad\001\002\000\006\210\212\211\213\001" +
    "\002\000\006\210\212\211\213\001\002\000\004\004\uffab" +
    "\001\002\000\004\004\uff9d\001\002\000\134\005\141\013" +
    "\144\014\202\015\170\016\203\017\174\020\153\021\163" +
    "\022\154\023\147\024\175\025\145\026\133\041\172\042" +
    "\162\043\165\044\132\045\156\046\135\047\167\050\177" +
    "\051\200\052\171\053\151\055\134\057\140\060\204\061" +
    "\207\062\161\071\142\072\155\073\176\100\146\111\353" +
    "\112\355\113\356\120\173\142\136\143\164\165\152\166" +
    "\166\167\157\170\150\207\205\212\201\001\002\000\134" +
    "\005\uff75\013\uff75\014\uff75\015\uff75\016\uff75\017\uff75\020" +
    "\uff75\021\uff75\022\uff75\023\uff75\024\uff75\025\uff75\026\uff75" +
    "\041\uff75\042\uff75\043\uff75\044\uff75\045\uff75\046\uff75\047" +
    "\uff75\050\uff75\051\uff75\052\uff75\053\uff75\055\uff75\057\uff75" +
    "\060\uff75\061\uff75\062\uff75\071\uff75\072\uff75\073\uff75\100" +
    "\uff75\111\uff75\112\uff75\113\uff75\120\uff75\142\uff75\143\uff75" +
    "\165\uff75\166\uff75\167\uff75\170\uff75\207\uff75\212\uff75\001" +
    "\002\000\004\004\uffca\001\002\000\134\005\uff74\013\uff74" +
    "\014\uff74\015\uff74\016\uff74\017\uff74\020\uff74\021\uff74\022" +
    "\uff74\023\uff74\024\uff74\025\uff74\026\uff74\041\uff74\042\uff74" +
    "\043\uff74\044\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051" +
    "\uff74\052\uff74\053\uff74\055\uff74\057\uff74\060\uff74\061\uff74" +
    "\062\uff74\071\uff74\072\uff74\073\uff74\100\uff74\111\uff74\112" +
    "\uff74\113\uff74\120\uff74\142\uff74\143\uff74\165\uff74\166\uff74" +
    "\167\uff74\170\uff74\207\uff74\212\uff74\001\002\000\134\004" +
    "\uff42\005\141\011\uff42\012\uff42\013\144\014\202\015\170" +
    "\016\203\017\174\020\153\021\163\022\154\023\147\024" +
    "\175\025\145\026\133\041\172\042\162\043\165\044\132" +
    "\045\156\046\135\047\167\050\177\051\200\052\171\053" +
    "\151\055\134\057\140\060\204\061\207\062\161\071\142" +
    "\072\155\073\176\100\146\120\173\142\136\143\164\165" +
    "\152\166\166\167\157\170\150\207\205\212\201\001\002" +
    "\000\134\005\uff73\013\uff73\014\uff73\015\uff73\016\uff73\017" +
    "\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73\025\uff73" +
    "\026\uff73\041\uff73\042\uff73\043\uff73\044\uff73\045\uff73\046" +
    "\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73\055\uff73" +
    "\057\uff73\060\uff73\061\uff73\062\uff73\071\uff73\072\uff73\073" +
    "\uff73\100\uff73\111\uff73\112\uff73\113\uff73\120\uff73\142\uff73" +
    "\143\uff73\165\uff73\166\uff73\167\uff73\170\uff73\207\uff73\212" +
    "\uff73\001\002\000\134\005\uff72\013\uff72\014\uff72\015\uff72" +
    "\016\uff72\017\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024" +
    "\uff72\025\uff72\026\uff72\041\uff72\042\uff72\043\uff72\044\uff72" +
    "\045\uff72\046\uff72\047\uff72\050\uff72\051\uff72\052\uff72\053" +
    "\uff72\055\uff72\057\uff72\060\uff72\061\uff72\062\uff72\071\uff72" +
    "\072\uff72\073\uff72\100\uff72\111\uff72\112\uff72\113\uff72\120" +
    "\uff72\142\uff72\143\uff72\165\uff72\166\uff72\167\uff72\170\uff72" +
    "\207\uff72\212\uff72\001\002\000\004\004\uffc7\001\002\000" +
    "\004\004\uffc9\001\002\000\126\005\141\013\144\014\202" +
    "\015\170\016\203\017\174\020\153\021\163\022\154\023" +
    "\147\024\175\025\145\026\133\041\172\042\162\043\165" +
    "\044\132\045\156\046\135\047\167\050\177\051\200\052" +
    "\171\053\151\055\134\057\140\060\204\061\207\062\161" +
    "\071\142\072\155\073\176\100\146\120\173\142\136\143" +
    "\164\165\152\166\166\167\157\170\150\207\205\212\201" +
    "\001\002\000\004\004\uffc8\001\002\000\006\004\uff6e\203" +
    "\273\001\002\000\004\004\uff95\001\002\000\004\004\uff9a" +
    "\001\002\000\126\005\141\013\144\014\202\015\170\016" +
    "\203\017\174\020\153\021\163\022\154\023\147\024\175" +
    "\025\145\026\133\041\172\042\162\043\165\044\132\045" +
    "\156\046\135\047\167\050\177\051\200\052\171\053\151" +
    "\055\134\057\140\060\204\061\207\062\161\071\142\072" +
    "\155\073\176\100\146\120\173\142\136\143\164\165\152" +
    "\166\166\167\157\170\150\207\205\212\201\001\002\000" +
    "\004\004\uffbb\001\002\000\126\005\141\013\144\014\202" +
    "\015\170\016\203\017\174\020\153\021\163\022\154\023" +
    "\147\024\175\025\145\026\133\041\172\042\162\043\165" +
    "\044\132\045\156\046\135\047\167\050\177\051\200\052" +
    "\171\053\151\055\134\057\140\060\204\061\207\062\161" +
    "\071\142\072\155\073\176\100\146\120\173\142\136\143" +
    "\164\165\152\166\166\167\157\170\150\207\205\212\201" +
    "\001\002\000\004\004\uffe3\001\002\000\202\002\001\004" +
    "\001\033\001\034\001\035\001\036\001\037\001\052\001" +
    "\054\001\063\001\064\001\065\001\066\001\067\001\070" +
    "\001\071\001\074\001\075\001\076\001\102\001\103\001" +
    "\104\001\105\001\106\001\107\001\110\001\114\001\115" +
    "\001\116\001\117\001\123\001\124\001\125\001\126\001" +
    "\131\001\132\001\133\001\135\001\136\001\137\001\140" +
    "\001\141\001\144\001\145\001\146\001\147\001\157\001" +
    "\160\001\161\001\162\001\163\001\164\001\171\001\172" +
    "\001\173\001\174\001\175\001\176\001\177\001\200\001" +
    "\201\001\202\001\207\001\212\001\001\002\000\004\002" +
    "\000\001\002\000\006\210\212\211\213\001\002\000\006" +
    "\210\212\211\213\001\002\000\010\004\uffc6\210\212\211" +
    "\213\001\002\000\004\004\uffc5\001\002\000\004\004\uffc4" +
    "\001\002\000\004\004\uffc3\001\002\000\004\212\u017a\001" +
    "\002\000\006\150\u0179\154\u0178\001\002\000\004\004\uff77" +
    "\001\002\000\004\212\u0177\001\002\000\004\004\uff76\001" +
    "\002\000\004\004\uff78\001\002\000\004\004\uff79\001\002" +
    "\000\004\212\u017b\001\002\000\004\004\uff7a\001\002\000" +
    "\004\212\u0189\001\002\000\004\212\u0187\001\002\000\004" +
    "\212\u0184\001\002\000\004\212\u0182\001\002\000\004\212" +
    "\u0181\001\002\000\004\004\uffd8\001\002\000\004\212\u0183" +
    "\001\002\000\004\004\uffde\001\002\000\012\111\353\112" +
    "\355\113\356\212\u0186\001\002\000\004\004\uffdb\001\002" +
    "\000\004\004\uffd9\001\002\000\010\111\353\112\355\113" +
    "\356\001\002\000\004\004\uffda\001\002\000\006\004\uffdc" +
    "\212\u018a\001\002\000\004\004\uffdd\001\002\000\006\210" +
    "\212\211\213\001\002\000\006\210\212\211\213\001\002" +
    "\000\006\210\212\211\213\001\002\000\006\210\212\211" +
    "\213\001\002\000\006\210\212\211\213\001\002\000\006" +
    "\210\212\211\213\001\002\000\006\210\212\211\213\001" +
    "\002\000\006\210\212\211\213\001\002\000\006\210\212" +
    "\211\213\001\002\000\006\210\212\211\213\001\002\000" +
    "\006\210\212\211\213\001\002\000\006\210\212\211\213" +
    "\001\002\000\006\210\212\211\213\001\002\000\006\210" +
    "\212\211\213\001\002\000\006\210\212\211\213\001\002" +
    "\000\004\004\uff9e\001\002\000\004\004\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0199\000\062\017\015\020\051\021\060\022\035\023" +
    "\065\024\036\025\010\026\105\027\012\030\046\031\111" +
    "\032\067\033\033\034\101\035\063\036\013\037\042\040" +
    "\071\041\031\042\073\043\050\044\074\045\014\046\062" +
    "\001\001\000\002\001\001\000\012\003\157\007\205\013" +
    "\136\014\u019a\001\001\000\004\047\u018a\001\001\000\002" +
    "\001\001\000\010\010\267\011\270\012\u0174\001\001\000" +
    "\002\001\001\000\004\047\u016e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\060\020\u016a\021" +
    "\060\022\035\023\065\024\036\025\010\026\105\027\012" +
    "\030\046\031\111\032\067\033\033\034\101\035\063\036" +
    "\013\037\042\040\071\041\031\042\073\043\050\044\074" +
    "\045\014\046\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u0166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\003\157\007\205\013" +
    "\136\014\u015a\015\u0158\001\001\000\002\001\001\000\014" +
    "\003\157\007\205\013\136\014\u0153\047\u0154\001\001\000" +
    "\010\010\267\011\270\012\u0152\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\157\007\205\013\136\014\u0120\001" +
    "\001\000\010\010\267\011\270\012\u011e\001\001\000\002" +
    "\001\001\000\004\047\u011c\001\001\000\002\001\001\000" +
    "\010\010\267\011\270\012\u011b\001\001\000\002\001\001" +
    "\000\012\003\157\007\205\013\136\014\u011a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\267\011\270\012\u0114\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\u0111\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\267\011\270\012\366\001\001" +
    "\000\002\001\001\000\010\010\267\011\270\012\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\157\007\205" +
    "\013\136\014\356\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\346\001\001\000\010\010\267\011\270" +
    "\012\344\001\001\000\004\047\343\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\334" +
    "\001\001\000\002\001\001\000\010\010\267\011\270\012" +
    "\330\001\001\000\020\003\157\007\205\010\267\011\270" +
    "\012\323\013\136\014\322\001\001\000\010\010\267\011" +
    "\270\012\321\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\157\007\205\013\136\014" +
    "\314\001\001\000\010\010\267\011\270\012\310\001\001" +
    "\000\010\010\267\011\270\012\307\001\001\000\012\003" +
    "\157\007\205\013\136\014\306\001\001\000\004\047\304" +
    "\001\001\000\002\001\001\000\010\010\267\011\270\012" +
    "\271\001\001\000\002\001\001\000\012\003\157\007\205" +
    "\013\136\014\142\001\001\000\002\001\001\000\004\047" +
    "\254\001\001\000\004\007\253\001\001\000\004\007\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\157\007\205\013\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\157\007\205\013" +
    "\247\001\001\000\010\003\157\007\205\013\246\001\001" +
    "\000\002\001\001\000\004\007\245\001\001\000\002\001" +
    "\001\000\004\007\244\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\242\006\226\001\001\000\002\001" +
    "\001\000\006\004\240\006\226\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\234\001\001\000\002\001\001\000" +
    "\004\007\233\001\001\000\006\004\232\006\226\001\001" +
    "\000\006\004\225\006\226\001\001\000\002\001\001\000" +
    "\004\047\222\001\001\000\002\001\001\000\010\003\157" +
    "\007\205\013\221\001\001\000\010\003\157\007\205\013" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\047\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\157\007\205\013\220" +
    "\001\001\000\010\003\157\007\205\013\217\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\157\007\205\013\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\227\001\001\000\004\047\243\001\001\000\004" +
    "\006\227\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\157\007\205\013\256" +
    "\047\257\001\001\000\002\001\001\000\004\047\260\001" +
    "\001\000\004\047\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\157\007\205\013\136\014\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\157\007\205\013\136\014\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\311\047\312\001\001\000\004\047\313\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\157\007\205\013\136\014\316\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\157\007\205\013\136" +
    "\014\327\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\157\007\205\013\136\014\333" +
    "\001\001\000\002\001\001\000\012\003\157\007\205\013" +
    "\136\014\335\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\157\007\205\013\136\014\340\001\001\000" +
    "\002\001\001\000\012\003\157\007\205\013\136\014\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\157\007\205\013\136\014\345\001\001\000\002\001\001" +
    "\000\012\003\157\007\205\013\136\014\347\001\001\000" +
    "\002\001\001\000\004\016\351\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\157\007\205\013\136\014\363\001\001\000\012\003" +
    "\157\007\205\013\136\014\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\267\011\270" +
    "\012\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\157\007\205\013\136\014\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\u0105\047\u0101\001" +
    "\001\000\002\001\001\000\004\047\u0108\001\001\000\002" +
    "\001\001\000\004\016\u0107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\157\007\205\013\136\014\u0112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\157\007\205\013\136\014\u0117\001\001" +
    "\000\002\001\001\000\012\003\157\007\205\013\136\014" +
    "\u0119\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\157\007\205\013\136\014\u011d\001" +
    "\001\000\002\001\001\000\012\003\157\007\205\013\136" +
    "\014\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\157\007\205\013\136\014\u0123" +
    "\001\001\000\002\001\001\000\012\003\157\007\205\013" +
    "\136\014\u0125\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\267\011\270\012\u0130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\u013b\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u0139\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\u0136\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u014d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0143\001\001" +
    "\000\012\003\157\007\205\013\136\014\u0144\001\001\000" +
    "\002\001\001\000\004\047\u0146\001\001\000\012\003\157" +
    "\007\205\013\136\014\u0147\001\001\000\002\001\001\000" +
    "\012\003\157\007\205\013\136\014\u0149\001\001\000\002" +
    "\001\001\000\004\047\u014b\001\001\000\012\003\157\007" +
    "\205\013\136\014\u014c\001\001\000\002\001\001\000\004" +
    "\047\u014e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\u0155\001\001\000\004\047\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\003\157" +
    "\007\205\013\136\014\u0160\016\u0161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\157" +
    "\007\205\013\136\014\u015f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\157\007\205\013\136\014\u0162\001\001\000\002\001" +
    "\001\000\010\010\267\011\270\012\u0164\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\157\007\205\013" +
    "\136\014\u0167\001\001\000\002\001\001\000\012\003\157" +
    "\007\205\013\136\014\u0169\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u0171\001\001" +
    "\000\004\047\u0170\001\001\000\004\047\u016f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u0184\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\u0187\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\u018b\001\001" +
    "\000\004\047\u018c\001\001\000\004\047\u018d\001\001\000" +
    "\004\047\u018e\001\001\000\004\047\u018f\001\001\000\004" +
    "\047\u0190\001\001\000\004\047\u0191\001\001\000\004\047" +
    "\u0192\001\001\000\004\047\u0193\001\001\000\004\047\u0194" +
    "\001\001\000\004\047\u0195\001\001\000\004\047\u0196\001" +
    "\001\000\004\047\u0197\001\001\000\004\047\u0198\001\001" +
    "\000\004\047\u0199\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static String urlContents = null;

	StringBuffer urlContentsBuffer = new StringBuffer(4096);

	public static String getUrlContents(){
		return urlContents;
	}

	public static MoleculeRenderer renderer = null;

	public static void setMoleculeRenderer(MoleculeRenderer r){
		renderer = r;
	}

	public static Hashtable definitions = new Hashtable();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // id ::= INTEGER TO INTEGER 
            {
              int[] RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int range[] = new int[2];
			range[0] = r.intValue();
			range[1] = l.intValue();
			RESULT = range;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // id ::= INTEGER 
            {
              int[] RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int range[] = new int[2];
			range[0] = n.intValue();
			range[1] = n.intValue();
			RESULT = range;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // number_list ::= number_list number 
            {
              FloatArray RESULT = null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FloatArray fa = (FloatArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 fa.add((float)f.doubleValue()); RESULT = fa; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*number_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // number_list ::= number 
            {
              FloatArray RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 FloatArray fa = new FloatArray(); fa.add((float)f.doubleValue()); RESULT = fa; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*number_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // id_list ::= id_list id 
            {
              Vector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int[] i = (int[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v.addElement(i); RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*id_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // id_list ::= id 
            {
              Vector RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int[] i = (int[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Vector v = new Vector(); v.addElement(i); RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*id_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // number ::= DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // number ::= INTEGER 
            {
              Double RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double((double)i.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // string_list ::= string_list STRING 
            {
              Vector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v.addElement(s); RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*string_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // string_list ::= STRING 
            {
              Vector RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Vector<String> v = new Vector<String>(); v.addElement(s); RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*string_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // statement ::= PEEK INTEGER 
            {
              byte[] RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray selectedAtoms = parser.renderer.peekSelection(i.intValue());

			RESULT = Selection.arrayToMask(parser.renderer, selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // statement ::= POP 
            {
              byte[] RESULT = null;
		
			DynamicArray selectedAtoms = parser.renderer.popSelection();

			if(selectedAtoms != null){
				RESULT = Selection.arrayToMask(parser.renderer, selectedAtoms);
			}else{
				RESULT = Selection.none(parser.renderer);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // statement ::= GROUP STRING 
            {
              byte[] RESULT = null;
		int definitionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int definitionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String definition = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Hashtable group =
				(Hashtable)parser.renderer.groups.get(definition);
			if(group == null){
				System.out.println("attempt to use undefined group " + definition);
				RESULT = Selection.none(parser.renderer);
			}else{
				RESULT = Selection.group(parser.renderer, group);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // statement ::= COMPOSITE string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.composite(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // statement ::= string_list 
            {
              byte[] RESULT = null;
		int compositesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int compositesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector composites = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		   	//RESULT = Selection.hierarchy(parser.renderer, composites);
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // statement ::= ID OPERATOR number 
            {
              byte[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = Selection.attribute(parser.renderer,
		 					Atom.ID,
							o.intValue(),
		 					d.doubleValue());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // statement ::= ATTRIBUTE OPERATOR number 
            {
              byte[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = Selection.attribute(parser.renderer,
		 					a.intValue(),
							o.intValue(),
		 					d.doubleValue());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // statement ::= MOLEXACT string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.moleculeExact(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // statement ::= MOLECULE string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.molecule(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // statement ::= CHAIN string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.chain(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // statement ::= NAME string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.name(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // statement ::= DEFAULT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.defaultSelection(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // statement ::= DISPLAYED 
            {
              byte[] RESULT = null;
		 RESULT = Selection.displayed(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // statement ::= WIDE 
            {
              byte[] RESULT = null;
		 RESULT = Selection.wide(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // statement ::= LABELLED 
            {
              byte[] RESULT = null;
		 RESULT = Selection.labelled(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // statement ::= XRAY 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.ModellingXray); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // statement ::= FIXED 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.ModellingFixed); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // statement ::= ENVIRONMENT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.ModellingEnvironment); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // statement ::= ACTIVE 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.ModellingActive); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // statement ::= PROPERTY 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.Property); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // statement ::= CONTEXT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.SurfaceContext); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // statement ::= SURFACE 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.Surface); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // statement ::= CURRENT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.current(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // statement ::= IONS 
            {
              byte[] RESULT = null;
		 RESULT = Selection.ions(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // statement ::= DNA 
            {
              byte[] RESULT = null;
		 RESULT = Selection.dna(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // statement ::= SOLVENT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.solvent(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // statement ::= AMINOACID 
            {
              byte[] RESULT = null;
		 RESULT = Selection.aminoacid(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // statement ::= NONE 
            {
              byte[] RESULT = null;
		 RESULT = Selection.none(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // statement ::= ALL 
            {
              byte[] RESULT = null;
		 RESULT = Selection.all(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // statement ::= INSERTION STRING 
            {
              byte[] RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.insertion(parser.renderer, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // statement ::= SEQUENTIAL id_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.sequential(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // statement ::= MODULO INTEGER 
            {
              byte[] RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.modulo(parser.renderer, n.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // statement ::= RESIDUE id_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.residue(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // statement ::= ELEMENT id_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.element(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // statement ::= ATOM string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.atom(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // statement ::= ID id_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.id(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // selection_expression ::= SPHERE number AROUND number number number 
            {
              byte[] RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double z = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =
			Selection.sphere(parser.renderer, 
				r.doubleValue(),
				x.doubleValue(),
				y.doubleValue(),
				z.doubleValue());
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // selection_expression ::= GRAPH selection_expression 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		  RESULT = Selection.graph(parser.renderer, mask);
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // selection_expression ::= CONTACT number selection_expression 
            {
              byte[] RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =
			Selection.contact(parser.renderer,
				r.doubleValue(), mask);
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // selection_expression ::= SPHERE number AROUND selection_expression 
            {
              byte[] RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =
			Selection.sphere(parser.renderer,
				r.doubleValue(), mask);
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // selection_expression ::= BONDED selection_expression 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.bonded(parser.renderer, mask); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // selection_expression ::= BYRESIDUE selection_expression 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.byresidue(parser.renderer, mask); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // selection_expression ::= NOT selection_expression 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.not(mask); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // selection_expression ::= selection_expression OR selection_expression 
            {
              byte[] RESULT = null;
		int mask1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mask1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		byte[] mask1 = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mask2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mask2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask2 = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.or(mask1, mask2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // selection_expression ::= selection_expression AND selection_expression 
            {
              byte[] RESULT = null;
		int mask1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mask1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		byte[] mask1 = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mask2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mask2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask2 = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.and(mask1, mask2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // selection_expression ::= LPAREN selection_expression RPAREN 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = mask; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // selection_expression ::= statement 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = mask; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // selection ::= selection_expression 
            {
              DynamicArray RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray selectedAtoms =
				Selection.maskToArray(parser.renderer, mask);
			if(parser.renderer.getSelectCount()){
				System.out.println("[" + selectedAtoms.size() + "]");
			}
			RESULT = selectedAtoms;
		
              CUP$parser$result = new java_cup.runtime.Symbol(10/*selection*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arg ::= ARG FALSE 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Object o[] = new Object[2];
			o[0] = a; o[1] = Boolean.FALSE;
			RESULT = o;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // arg ::= ARG TRUE 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Object o[] = new Object[2];
			o[0] = a; o[1] = Boolean.TRUE;
			RESULT = o;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // arg ::= ARG LCURLY selection RCURLY 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Object o[] = new Object[2];
			o[0] = a; o[1] = selectedAtoms;
			RESULT = o;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // arg ::= ARG DOUBLE 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Object o[] = new Object[2]; o[0] = a; o[1] = d; RESULT = o; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // arg ::= ARG INTEGER 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Object o[] = new Object[2]; o[0] = a; o[1] = i; RESULT = o; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // arg ::= ARG STRING 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Object o[] = new Object[2]; o[0] = a; o[1] = value; RESULT = o; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // arg_list ::= arg_list arg 
            {
              Arguments RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments h = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 h.put(a[0], a[1]); RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*arg_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arg_list ::= arg 
            {
              Arguments RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Arguments h = new Arguments(); h.put(a[0], a[1]); RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*arg_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // arguments ::= arg_list 
            {
              Arguments RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments a = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*arguments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // arguments ::= 
            {
              Arguments RESULT = null;
		 RESULT = new Arguments(); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*arguments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // on_off ::= TOGGLE 
            {
              String RESULT = null;
		 RESULT = new String("toggle"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*on_off*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // on_off ::= OFF 
            {
              String RESULT = null;
		 RESULT = new String("off"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*on_off*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // on_off ::= ON 
            {
              String RESULT = null;
		 RESULT = new String("on"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*on_off*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // render_style ::= LINES 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Atom.Displayed); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*render_style*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // render_style ::= STICKS 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Atom.BallAndStick); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*render_style*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // render_style ::= CYLINDERS 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Atom.Cylinder); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*render_style*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // render_style ::= SPHERES 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Atom.VDWSphere); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*render_style*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // texture_command ::= TEXTURE REMOVE STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // texture_command ::= TEXTURE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleTextureCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // texture_command ::= TEXTURE STRING LIPOPHILICITY 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Texture tex = Texture.lipophilicityTexture();
			parser.renderer.renderer.textures.put(name, tex);
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // texture_command ::= TEXTURE STRING SIMPLE 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Texture tex = Texture.simpleTexture();
			parser.renderer.renderer.textures.put(name, tex);
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // texture_command ::= TEXTURE LOAD STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int imageleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int imageright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String image = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Hashtable<String,Texture> textureHash =
				parser.renderer.renderer.textures;

			if(textureHash.get(name) == null){
				Texture tex = Texture.loadTexture(image);

				if(tex != null){
					textureHash.put(name, tex);
				}else{
					System.out.println("couldn't load texture " +
						 image);
				}
			}else{
				System.out.println("texture " + name +
						" already defined: not reloaded");
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // object_command ::= OBJECT STRING arguments 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleObjectCommand(name, args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // object_command ::= OBJECT STRING TEXTURE RECTANGULAR 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.rectangular(tm);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // object_command ::= OBJECT STRING COPYTO STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int newnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int newnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String newname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			Tmesh tm = Tmesh.copy(objects);
			tm.setName(newname);
			parser.renderer.addGraphicalObject(tm);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // object_command ::= OBJECT STRING CLIP STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uvSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uvSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String uvSpec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = 0;
			if(uvSpec.indexOf("u") != -1) uv |= Tmesh.UTexture;
			if(uvSpec.indexOf("v") != -1) uv |= Tmesh.VTexture;

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				tm.clip(uv);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // object_command ::= OBJECT STRING TRANSPARENCY INTEGER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);
			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				tm.setTransparency(t.intValue());
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // object_command ::= OBJECT STRING LINEWIDTH number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double w = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);
			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				tm.setLineWidth(w.doubleValue());
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // object_command ::= OBJECT STRING COLOR STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colorNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int colorNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String colorName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);
			int color = Color32.getColorFromName(colorName);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				tm.setColorStyle(Tmesh.ObjectColor);
				tm.setColor(color);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // object_command ::= OBJECT STRING TEXTURE LIPOPHILICITY STRING number selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uvspecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uvspecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String uvspec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double dmax = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = -1;
			if(uvspec.equals("u")){
				uv = Tmesh.UTexture;
			}else if(uvspec.equals("v")){
				uv = Tmesh.VTexture;
			}

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.property_map(tm, selectedAtoms, uv,
					dmax.doubleValue(), false,
					Texgen.Lipophilicity);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // object_command ::= OBJECT STRING TEXTURE ELECTROSTATIC STRING number selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uvspecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uvspecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String uvspec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double dmax = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = -1;
			if(uvspec.equals("u")){
				uv = Tmesh.UTexture;
			}else if(uvspec.equals("v")){
				uv = Tmesh.VTexture;
			}

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.property_map(tm, selectedAtoms, uv,
					dmax.doubleValue(), false,
					Texgen.Electrostatic);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // object_command ::= OBJECT STRING TEXTURE CURVATURE STRING number selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uvspecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uvspecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String uvspec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double dmax = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = -1;
			if(uvspec.equals("u")){
				uv = Tmesh.UTexture;
			}else if(uvspec.equals("v")){
				uv = Tmesh.VTexture;
			}

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.curvature(tm, selectedAtoms, uv,
					dmax.doubleValue());
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // object_command ::= OBJECT STRING TEXTURE DISTANCE STRING selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uvspecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uvspecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String uvspec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = -1;
			if(uvspec.equals("u")){
				uv = Tmesh.UTexture;
			}else if(uvspec.equals("v")){
				uv = Tmesh.VTexture;
			}

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.distance(tm, selectedAtoms, uv);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // object_command ::= OBJECT STRING TEXTURE STRING number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double val = value.doubleValue();
			int att = 0;
    			if(attribute.equals("vscale")){
				att = Tmesh.VScale;
    			}else if(attribute.equals("uscale")){
				att = Tmesh.UScale;
    			}else if(attribute.equals("vdiv")){
				att = Tmesh.VScale;
				val = 1.0/val;
    			}else if(attribute.equals("udiv")){
				att = Tmesh.UScale;
				val = 1.0/val;
    			}else if(attribute.equals("voffset")){
				att = Tmesh.VOffset;
    			}else if(attribute.equals("uoffset")){
				att = Tmesh.UOffset;
			}else{
				System.out.println("unknown texture attribute " + attribute);
			}

			if(att != 0){
				parser.renderer.renderer.scaleTexture(name, att, val);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // object_command ::= OBJECT STRING TEXTURE STRING number number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double value2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = 0;
	
			if(range.equals("urange")){
				uv = Tmesh.UTexture;
			}else if(range.equals("vrange")){
				uv = Tmesh.VTexture;
			}else{
				System.out.println("texture command not recognised: " + range);
			}

			if(uv > 0){
				double min = value.doubleValue();
				double max = value2.doubleValue();

				DynamicArray objects =
					parser.renderer.renderer.getGraphicalObjects(name);
					int objectCount = objects.size();

				double scale = 1./(max - min);

				for(int i = 0; i < objectCount; i++){
					Tmesh object = (Tmesh)objects.get(i);
					object.setTextureRange(uv, min, max);
				}
			}

		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // object_command ::= OBJECT STRING TEXTURE STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int textureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String texture = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(texture.equals("off")){
				parser.renderer.renderer.applyTexture(name, null);
			}else{
				parser.renderer.renderer.applyTexture(name, texture);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // object_command ::= OBJECT STRING BACKFACE on_off 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(state.equals("on")){
				parser.renderer.renderer.setBackface(name, true);
			}else if(state.equals("off")){
				parser.renderer.renderer.setBackface(name, false);
			}else{
				System.out.println("object backface: illegal state " + state);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // object_command ::= OBJECT STRING DISPLAY on_off 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			MoleculeRenderer r = parser.renderer;

			if(state.equals("off")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 0);
			}else if(state.equals("on")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 1);
			}else if(state.equals("toggle")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 2);
			}else{
				// otherwise assume it is a colour name.
				int c = Color32.getColorFromName(state);
				r.renderer.setGraphicalObjectsColour(pattern, c);
			}

		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // object_command ::= OBJECT DISPLAY STRING on_off 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			MoleculeRenderer r = parser.renderer;

			if(state.equals("off")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 0);
			}else if(state.equals("on")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 1);
			}else if(state.equals("toggle")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 2);
			}else{
				// otherwise assume it is a colour name.
				int c = Color32.getColorFromName(state);
				r.renderer.setGraphicalObjectsColour(pattern, c);
			}

		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // object_command ::= OBJECT LOAD STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Tmesh tm = Tmesh.read(filename);
			tm.setName(name);
			parser.renderer.addGraphicalObject(tm);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // object_command ::= OBJECT REMOVE STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeGraphicalObjects(pattern);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // load_command ::= ZAP 
            {
              Object RESULT = null;
		 parser.renderer.reset(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*load_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // load_command ::= LOAD MOLECULE STRING 
            {
              Object RESULT = null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.addMolecule(file, file); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*load_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // load_command ::= LOAD MOLECULE STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.addMolecule(file, name); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*load_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // schematic_command ::= SCHEMATIC arguments selection 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Tmesh tm = Schematic.create(args, parser.renderer, selectedAtoms);
			parser.renderer.addGraphicalObject(tm);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(30/*schematic_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // schematic_command ::= SECSTRUC arguments selection 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			String type = args.getString("-type", null);

			if(type == null){
				Tmesh tm = 
				SecondaryStructure.assign(parser.renderer.getMolecules());
				if(SecondaryStructure.debug){
					parser.renderer.addGraphicalObject(tm);
				}
			}else{
				int sstype = -1;
				if(type.equals("helix")){
					sstype = Residue.Helix;
				}else if(type.equals("sheet")){
					sstype = Residue.Sheet;
				}else if(type.equals("coil")){
					sstype = Residue.Coil;
				}

				if(sstype != -1){
					// inefficient
					for(int i = 0; i < selectedAtoms.size(); i++){
						Atom a = (Atom)selectedAtoms.get(i);
						Residue r = a.getResidue();
						r.setSecondaryStructure(sstype);
					}
				}
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(30/*schematic_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // active_site_command ::= ACTIVE_SITE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		astex.design.ActiveSite.handleCommand(parser.renderer.moleculeViewer, args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(36/*active_site_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // hbond_command ::= HBOND arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleHbondCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(35/*hbond_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // light_command ::= LIGHT INTEGER arguments 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleLightCommand(n.intValue(), args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(32/*light_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // animation_command ::= ANIMATE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.moleculeViewer.handleAnimation(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(31/*animation_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // miscellaneous_command ::= UPDATE arguments number_list 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FloatArray nl = (FloatArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleUpdateCommand(args, nl);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // miscellaneous_command ::= STRING arguments 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			try {
				parser.renderer.handleUserCommand(s, args);
			}catch(Throwable t){
				t.printStackTrace();
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // miscellaneous_command ::= SLIDE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleSlideCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // miscellaneous_command ::= RUN STRING 
            {
              Object RESULT = null;
		int scriptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int scriptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String script = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.executeScript(script);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // miscellaneous_command ::= PRINT STRING 
            {
              Object RESULT = null;
		int outputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int outputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String output = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.moleculeViewer.handlePrint(output);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // miscellaneous_command ::= REPAINT 
            {
              Object RESULT = null;
		
			parser.renderer.moleculeViewer.repaint();
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // miscellaneous_command ::= BACKGROUND STRING 
            {
              Object RESULT = null;
		int colorNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int colorNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String colorName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int color = Color32.getColorFromName(colorName);
			parser.renderer.renderer.setBackgroundColor(color);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // miscellaneous_command ::= MATRIX number number number number number number number number number number number number number number number number 
            {
              Object RESULT = null;
		int x00left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int x00right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Double x00 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int x01left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int x01right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Double x01 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int x02left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int x02right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Double x02 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int x03left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int x03right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Double x03 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int x10left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int x10right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Double x10 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int x11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int x11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Double x11 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int x12left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int x12right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Double x12 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int x13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int x13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Double x13 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int x20left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int x20right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Double x20 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int x21left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int x21right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double x21 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int x22left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int x22right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double x22 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int x23left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int x23right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double x23 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int x30left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int x30right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x30 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int x31left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int x31right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x31 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int x32left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x32right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x32 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x33left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int x33right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x33 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Matrix rm = parser.renderer.renderer.rotationMatrix;
			rm.x00 = x00.doubleValue();
			rm.x01 = x01.doubleValue();
			rm.x02 = x02.doubleValue();
			rm.x03 = x03.doubleValue();
			rm.x10 = x10.doubleValue();
			rm.x11 = x11.doubleValue();
			rm.x12 = x12.doubleValue();
			rm.x13 = x13.doubleValue();
			rm.x20 = x20.doubleValue();
			rm.x21 = x21.doubleValue();
			rm.x22 = x22.doubleValue();
			rm.x23 = x23.doubleValue();
			rm.x30 = x30.doubleValue();
			rm.x31 = x31.doubleValue();
			rm.x32 = x32.doubleValue();
			rm.x33 = x33.doubleValue();
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // miscellaneous_command ::= FETCH STRING 
            {
              Object RESULT = null;
		int urlNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int urlNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String urlName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			try {
				URL url = new URL(urlName);
				BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
				String line;
				String contents = "";
				String lineSeparator =
					java.lang.System.getProperty("line.separator");

				parser.urlContentsBuffer.setLength(0);

				while((line = br.readLine()) != null){
					//contents += line;
					//contents += lineSeparator;
					parser.urlContentsBuffer.append(line);
					parser.urlContentsBuffer.append(lineSeparator);
					//System.out.println("saw line <" + line + ">");
				}

				br.close();

				parser.urlContents = parser.urlContentsBuffer.toString();

			}catch(Exception e){
				System.out.println("error opening url: " + urlName);
				System.out.println("" + e);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // miscellaneous_command ::= TORSION CLEAR 
            {
              Object RESULT = null;
		
			parser.renderer.removeAllTorsions();
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // miscellaneous_command ::= ANGLE CLEAR 
            {
              Object RESULT = null;
		
			parser.renderer.removeAllAngles();
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // miscellaneous_command ::= SET STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(name.equals("arraycopy")){
				boolean b = value.equals("true") ? true : false;
				// fix
				//parser.renderer.setArrayCopy(b);
			}else if(name.equals("minimumspacing")){
				double d = FILE.readDouble(value);
				Surface.setMinimumSpacing(d);
			}else if(name.equals("contoursize")){
				int d = FILE.readInteger(value);
				parser.renderer.setContourSize(d);
			}else if(name.equals("pick")){
				int pickMode = -1;
				if(value.equals("distances")){
					pickMode = parser.renderer.DISTANCE_PICK;
				}else if(value.equals("angles")){
					pickMode = parser.renderer.ANGLE_PICK;
				}else{
					System.out.println("invalid pick mode " + value);
				}

				if(pickMode != -1){
					parser.renderer.setPickMode(pickMode);
				}
			}else{
				System.out.println("invalid parameter " + name);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // miscellaneous_command ::= DELETE selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleDeleteCommand(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // miscellaneous_command ::= EDIT STRING STRING selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleEditCommand(name, value, selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // miscellaneous_command ::= SET STRING on_off 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(name.equals("bondtypes")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.displayBondTypes(b);
			}else if(name.equals("bump_in_same_molecule")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.setBumpInSameMolecule(b);
			}else if(name.equals("symmetry")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.setSymmetry(b);
			}else if(name.equals("bumps")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.setDisplayBumps(b);
			}else if(name.equals("selectcount")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.setSelectCount(b);
			}else{
				System.out.println("invalid parameter " + name);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // view_command ::= VIEW arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			MoleculeViewer mv = parser.renderer.moleculeViewer;
			ViewCommand.execute(mv, args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(34/*view_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // distance_command ::= DISTANCE STRING 
            {
              Object RESULT = null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(state.equals("on")){
				parser.renderer.setDisplayDistances(true);
			}else if(state.equals("off")){
				parser.renderer.setDisplayDistances(false);
			}else if(state.equals("toggle")){
				boolean bumps =
					parser.renderer.getDisplayDistances();
				parser.renderer.setDisplayDistances(!bumps);
			}else{
				System.out.println("invalid distance state: " + state);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*distance_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // distance_command ::= DISTANCE CLEAR 
            {
              Object RESULT = null;
		 parser.renderer.removeAllDistances(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*distance_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // distance_command ::= DISTANCE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleDistanceCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*distance_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // distance_command ::= DISTANCE selection TO selection 
            {
              Object RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DynamicArray first = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray second = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			for(int i = 0; i < first.size(); i++){
				Atom firstAtom = (Atom)first.get(i);
				for(int j = 0; j < second.size(); j++){
					Atom secondAtom = (Atom)second.get(j);
					parser.renderer.addDistance(firstAtom,
							secondAtom);
				}
			}

			//Selection.dynamicArrayCache.add(first);
			//Selection.dynamicArrayCache.add(second);
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*distance_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // center_command ::= CENTER number number number 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double z = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.setCenter(x.doubleValue(),
					     y.doubleValue(),
					     z.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*center_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // center_command ::= RADIUS number 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.setRadius(x.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*center_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // center_command ::= CENTER selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setCenter(selectedAtoms); 
			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*center_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // label_command ::= LABEL STRING selection 
            {
              Object RESULT = null;
		int formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String format = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.generateAtomLabels(format,
							   selectedAtoms);
			//for(int i = 0; i < selectedAtoms.size(); i++){
			//	Atom a = (Atom)selectedAtoms.get(i);
			//	a.setLabelled(true);
			//}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*label_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // label_command ::= LABEL CLEAR selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			for(int i = 0; i < selectedAtoms.size(); i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setCustomLabel(null);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*label_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // color_command ::= TRANSPARENCY INTEGER selection 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setTransparency(n.intValue());
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // color_command ::= COLOR STRING selection 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int color =
				Color32.getColorFromName(c);

			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setColor(color);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // color_command ::= COLOR_BY_RAINBOW selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.colorByRainbow(selectedAtoms);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // color_command ::= COLOR_BY_BVALUE_RANGE 
            {
              Object RESULT = null;
		
			parser.renderer.colorByPropertyRange(Atom.B);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // color_command ::= COLOR_BY_ENERGY 
            {
              Object RESULT = null;
		
			parser.renderer.colorByPropertyRange(Atom.E);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // color_command ::= COLOR_BY_BVALUE 
            {
              Object RESULT = null;
		
			parser.renderer.colorByBFactor();
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // color_command ::= COLOR_BY_CHAIN 
            {
              Object RESULT = null;
		
			parser.renderer.colorByChain();
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // color_command ::= COLOR_BY_ATOM 
            {
              Object RESULT = null;
		
			parser.renderer.colorByAtom();
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // surface_command ::= ANASURFACE arguments STRING STRING selection 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String colour = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();
			double xxx[][] = new double[selectionCount][3];
			double r[] = new double[selectionCount];
			int visible[] = new int[selectionCount];
			int colors[] = new int[selectionCount];
			int color = Color32.getColorFromName(colour);
			
			double probeRadius = args.getDouble("-probe", 1.5);

			AnaSurface.defaultProbeRadius = probeRadius;

			int quality = args.getInteger("-quality", 2);

			AnaSurface.defaultQuality = quality;


			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				xxx[i][0] = a.x;
				xxx[i][1] = a.y;
				xxx[i][2] = a.z;
				r[i] = a.getVDWRadius();
				visible[i] = 1;
				colors[i] = a.getColor();
			}

			AnaSurface s =
				new AnaSurface(xxx, r, visible, colors, selectionCount);

			// set the background color for the object
			s.backgroundColor = color;


			// construct the surface.
			Tmesh tm = s.construct();

			tm.setName(name);

			parser.renderer.addGraphicalObject(tm);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(25/*surface_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // display_command ::= SURFACE arguments STRING STRING selection 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String colour = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(args.getBoolean("-lazy", false) == false ||
                           parser.renderer.renderer.getGraphicalObject(name) == null){
				parser.renderer.removeGraphicalObjects(name);
				Surface.setProbeRadius(args.getDouble("probe", 1.5));

				MoleculeRenderer r = parser.renderer;
				Tmesh surface =
					Surface.connolly(selectedAtoms, 0.3,
						args.getBoolean("solid", false));
				surface.setName(name);
				int c = Color32.getColorFromName(colour);
				surface.setColor(c);
				r.addGraphicalObject(surface);
			}
			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // display_command ::= ATTRIBUTE number selection 
            {
              Object RESULT = null;
		int attleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer att = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();
			int value = att.intValue();
			int selectedAtomCount = selectedAtoms.size();
			boolean printedError = false;

	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				if(value == Atom.B){
					a.setBFactor(newr);
				}else if(value == Atom.O){
					a.setOccupancy(newr);
				}else if(value == Atom.X){
					a.setX(newr);
				}else if(value == Atom.Y){
					a.setY(newr);
				}else if(value == Atom.Z){
					a.setZ(newr);
				}else{
					if(!printedError){
						System.out.println("error unknown attribute " + value);
						printedError = true;
					}
				}

	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // display_command ::= CHARGE number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			int selectedAtomCount = selectedAtoms.size();
	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setPartialCharge(newr);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // display_command ::= STICK_COLOR STRING selection 
            {
              Object RESULT = null;
		int colourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String colour = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int c = Color32.getColorFromName(colour);
			DynamicArray selectedBonds =
				parser.renderer.getBondsInSelection(selectedAtoms);

			for(int i = 0; i < selectedBonds.size(); i++){
				Bond b = (Bond)selectedBonds.get(i);
				b.setBondColor(c);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // display_command ::= BOND_WIDTH INTEGER selection 
            {
              Object RESULT = null;
		int iwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer iw = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int neww = iw.intValue();

			DynamicArray selectedBonds =
				parser.renderer.getBondsInSelection(selectedAtoms);
			for(int i = 0; i < selectedBonds.size(); i++){
				Bond b = (Bond)selectedBonds.get(i);
				b.setBondWidth(neww);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // display_command ::= CYLINDER_RADIUS number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			DynamicArray selectedBonds =
				parser.renderer.getBondsInSelection(selectedAtoms);
			for(int i = 0; i < selectedBonds.size(); i++){
				Bond b = (Bond)selectedBonds.get(i);
				b.setCylinderWidth(newr);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // display_command ::= STICK_RADIUS number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			DynamicArray selectedBonds =
				parser.renderer.getBondsInSelection(selectedAtoms);
			for(int i = 0; i < selectedBonds.size(); i++){
				Bond b = (Bond)selectedBonds.get(i);
				b.setStickWidth(newr);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // display_command ::= BALL_RADIUS number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			int selectedAtomCount = selectedAtoms.size();
	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setBallRadius(newr);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // display_command ::= VDW number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			int selectedAtomCount = selectedAtoms.size();
	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setVDWRadius(newr);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // display_command ::= DOTSURFACE STRING INTEGER selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeGraphicalObjects(name);

			Tmesh dotSurface =
				Surface.dotSurface(selectedAtoms, n.intValue());

			dotSurface.setName(name);

			parser.renderer.addGraphicalObject(dotSurface);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // display_command ::= CLIP DECREASE number 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.renderer.setClip(parser.renderer.renderer.getClip() - c.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // display_command ::= CLIP INCREASE number 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.renderer.setClip(parser.renderer.renderer.getClip() + c.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // display_command ::= CLIP number number 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.renderer.setClip(c.doubleValue(), d.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // display_command ::= CLIP number 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.renderer.setClip(c.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // display_command ::= DISPLAY WIDE selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int moleculeCount = parser.renderer.getMoleculeCount();

			for(int m = 0; m < moleculeCount; m++){
	    			Molecule molecule = parser.renderer.getMolecule(m);
				int bondCount = molecule.getBondCount();

				for(int b = 0; b < bondCount; b++){
					Bond bond = molecule.getBond(b);
					bond.setBondWidth(1);
	    			}
			}

                        int atomCount = selectedAtoms.size();

                        for(int a = 0; a < atomCount; a++){
                                Atom atom = (Atom)selectedAtoms.get(a);
                                int bondCount = atom.getBondCount();
                                for(int b = 0; b < bondCount; b++){
                                        Bond bond = atom.getBond(b);
                                        bond.setBondWidth(2);
                                }
                        }

			//Selection.dynamicArrayCache.add(selectedAtoms);
                
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // display_command ::= DISPLAY render_style on_off selection 
            {
              Object RESULT = null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer mode = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int onoffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int onoffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String onoff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int displayBit = mode.intValue();;
			int on = 0;

			if(onoff.equals("on")){
				on = 1;
			}else if(onoff.equals("off")){
				on = 0;
				displayBit = ~displayBit;
			}else{
				System.out.println("illegal state in display command " + onoff);
			}
			
			if(displayBit != 0){
				int atomCount = selectedAtoms.size();
	
				for(int a = 0; a < atomCount; a++){
					Atom atom = (Atom)selectedAtoms.get(a);
					if(on == 1){
						atom.attributes |= displayBit;
					}else{
						atom.attributes &= displayBit;
					}
				}
			}else{
				System.out.println("invalid display mode " + mode);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // display_command ::= DISPLAY render_style selection 
            {
              Object RESULT = null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer mode = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int displayBit = mode.intValue();;

			if(displayBit != 0){
		   	 	AtomIterator iterator =
					parser.renderer.getAtomIterator();
		    
	  		  	while(iterator.hasMoreElements()){
					Atom atom = iterator.getNextAtom();
					atom.attributes &= ~displayBit;
				}
				
				int atomCount = selectedAtoms.size();
	
				for(int a = 0; a < atomCount; a++){
					Atom atom = (Atom)selectedAtoms.get(a);
					atom.attributes |= displayBit;
				}
			}else{
				System.out.println("invalid display mode " + mode);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // display_command ::= DISPLAY selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			AtomIterator iterator =
				parser.renderer.getAtomIterator();
	    
			while(iterator.hasMoreElements()){
				Atom atom = iterator.getNextAtom();
				atom.setTemporarilySelected(false);
		    	}

			int selectedAtomCount = selectedAtoms.size();
	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setTemporarilySelected(true);
	    		}

	   	 	iterator = parser.renderer.getAtomIterator();
	    
	  	  	while(iterator.hasMoreElements()){
				Atom atom = iterator.getNextAtom();
				if(atom.isTemporarilySelected()){
		    			atom.setDisplayed(true);
				}else{
		   			atom.setDisplayed(false);
				}
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // map_command ::= MAP STRING arguments 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			//System.out.println("args " + args);
			parser.renderer.handleMapCommand(name, args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // map_command ::= MAP STRING CONTOUR INTEGER on_off 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int onoffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int onoffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String onoff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int displayed = -1;
			
			astex.Map map = parser.renderer.getMap(name);

			if(onoff.equals("toggle")){
			  displayed = 2;
			}else if(onoff.equals("on")){
			  displayed = 1;
			}else if(onoff.equals("off")){
			  displayed = 0;
			}

			parser.renderer.setMapContourDisplayed(name,
				contour.intValue(),
				displayed);

			//map.setNeedsReading(true);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // map_command ::= MAP STRING CLIP selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.clipMaps(name, selectedAtoms, true);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // map_command ::= MAP STRING CONTOUR INTEGER TRANSPARENCY INTEGER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMapContourTransparency(name,
								contour.intValue(),
								t.intValue());

		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // map_command ::= MAP STRING CONTOUR INTEGER LINEWIDTH number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double w = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMapContourLineWidth(name,
								contour.intValue(),
								w.doubleValue());

		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // map_command ::= MAP STRING CONTOUR INTEGER SOLID on_off 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray maps = parser.renderer.getMaps(name);

			for(int i = 0; i < maps.size(); i++){
				astex.Map map = (astex.Map)maps.get(i);
				if(value.equals("on")){
					map.setContourStyle(contour.intValue(), astex.Map.Surface);
				}else{
					map.setContourStyle(contour.intValue(), astex.Map.Lines);
				}
				parser.renderer.contourMap(map, contour.intValue());
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // map_command ::= MAP STRING CONTOUR INTEGER COLOR STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				int colour = Color32.getColorFromName(c);

				//System.out.println("color change to " + colour);
				parser.renderer.setMapContourColour(name,
						contour.intValue(),
						colour);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // map_command ::= MAP STRING CONTOUR INTEGER STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int onoffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int onoffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String onoff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray maps = parser.renderer.getMaps(name);

			for(int i = 0; i < maps.size(); i++){
				astex.Map map = (astex.Map)maps.get(i);
				if(onoff.equals("wire")){
					map.setContourStyle(contour.intValue(), astex.Map.Lines);
					parser.renderer.contourMap(map, contour.intValue());
				}else if(onoff.equals("solid")){
					map.setContourStyle(contour.intValue(), astex.Map.Surface);
					parser.renderer.contourMap(map, contour.intValue());
				}else{
					int colour =
						Color32.getColorFromName(onoff);
					//System.out.println("color change to " + colour);
					parser.renderer.setMapContourColour(name,
							contour.intValue(),
							colour);
				}
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // map_command ::= MAP STRING CONTOUR INTEGER number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMapContourLevel(name,
					contour.intValue(),
					value.doubleValue());
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // map_command ::= MAP REMOVE STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeMap(name);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // map_command ::= MAP LOAD STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			astex.Map map = astex.Map.create();
			map.setFile(file);
			map.setName(name);
			parser.renderer.addMap(map);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // remove_command ::= REMOVE OBJECT STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeGraphicalObjects(pattern);
		
              CUP$parser$result = new java_cup.runtime.Symbol(28/*remove_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // remove_command ::= REMOVE MOLECULE STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeMolecule(pattern);
		
              CUP$parser$result = new java_cup.runtime.Symbol(28/*remove_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // molecule_command ::= MOLECULE REMOVE STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeMolecule(pattern);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // molecule_command ::= MOLECULE DISPLAY STRING STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMoleculeVisibility(pattern, action);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // molecule_command ::= MOLECULE STRING STRING on_off 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMoleculeVariable(pattern, name, value);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // molecule_command ::= MOLECULE DISPLAY STRING on_off 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMoleculeVisibility(pattern, action);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // molecule_command ::= MOLECULE LOAD STRING 
            {
              Object RESULT = null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.addMolecule(file, file);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // molecule_command ::= MOLECULE LOAD STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.addMolecule(file, name);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // molecule_command ::= MOLECULE LAZY STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Molecule mol = parser.renderer.getMolecule(name);

			if(mol == null){
				parser.renderer.addMolecule(file, name);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // molecule_command ::= WRITE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleWriteCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // selection_command ::= EVALUATE selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Selection.store(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // selection_command ::= PUSH 
            {
              Object RESULT = null;
		
			AtomIterator iterator =
				parser.renderer.getAtomIterator();
			DynamicArray selectedAtoms = new DynamicArray();
	    
			// clear the selection state of all atoms
			while(iterator.hasMoreElements()){
				Atom atom = iterator.getNextAtom();
				if(atom.isSelected()){
					selectedAtoms.add(atom);
					atom.setSelected(false);
				}
			}
		
			parser.renderer.pushSelection(selectedAtoms);

		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection_command ::= UNDEFINE STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.groups.remove(name);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_command ::= DEFINE STRING selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			System.out.println("storing definition " + name +
				" atom count " + selectedAtoms.size());

			Hashtable<Atom,Atom> h = new Hashtable<Atom,Atom>();

			int count = selectedAtoms.size();

			for(int i = 0; i < count; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				h.put(a, a);
			}

			parser.renderer.groups.put(name, h); 

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // selection_command ::= INVERT selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				if(a.isSelected()){
					a.setSelected(false);
				}else{
					a.setSelected(true);
				}
	    		}
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // selection_command ::= EXCLUDE selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setSelected(false);
	    		}

		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // selection_command ::= APPEND selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setSelected(true);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // selection_command ::= SELECT selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			AtomIterator iterator =
				parser.renderer.getAtomIterator();
	    
			// clear the selection state of all atoms
			while(iterator.hasMoreElements()){
				Atom atom = iterator.getNextAtom();
				atom.setSelected(false);
			}
		
			parser.renderer.setSelected(selectedAtoms);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // selection_command ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // definition ::= active_site_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // definition ::= hbond_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // definition ::= view_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // definition ::= write_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // definition ::= light_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // definition ::= animation_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definition ::= schematic_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definition ::= surface_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // definition ::= texture_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // definition ::= remove_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // definition ::= load_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definition ::= miscellaneous_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definition ::= object_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definition ::= selection_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definition ::= label_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= color_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= distance_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= center_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= display_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definition ::= map_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // definition ::= molecule_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= definition SEMI 
            {
              Object RESULT = null;
		 parser.renderer.dirty = true; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // script ::= command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= script EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // script ::= script command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

