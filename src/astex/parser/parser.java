
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Wed Mar 05 16:33:48 GMT 2008
//----------------------------------------------------

package astex.parser;

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java.net.*;
import astex.*;
import astex.anasurface.*;

/** CUP v0.10j generated parser.
  * @version Wed Mar 05 16:33:48 GMT 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\331\000\002\017\004\000\002\002\004\000\002\017" +
    "\003\000\002\020\004\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\003\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\031\002\000\002\031" +
    "\004\000\002\031\004\000\002\031\004\000\002\031\004" +
    "\000\002\031\005\000\002\031\004\000\002\031\003\000" +
    "\002\031\004\000\002\022\004\000\002\022\006\000\002" +
    "\022\006\000\002\022\005\000\002\022\006\000\002\022" +
    "\006\000\002\022\006\000\002\022\005\000\002\036\005" +
    "\000\002\036\005\000\002\023\006\000\002\023\005\000" +
    "\002\023\007\000\002\023\007\000\002\023\010\000\002" +
    "\023\010\000\002\023\010\000\002\023\010\000\002\023" +
    "\006\000\002\023\007\000\002\023\005\000\002\024\004" +
    "\000\002\024\005\000\002\024\006\000\002\024\005\000" +
    "\002\024\004\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\006\000\002\024\005\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005\000" +
    "\002\024\007\000\002\033\007\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\004\000\002\027\005\000\002\027\005" +
    "\000\002\030\005\000\002\030\005\000\002\025\004\000" +
    "\002\025\004\000\002\025\006\000\002\026\006\000\002" +
    "\026\004\000\002\026\004\000\002\026\004\000\002\045" +
    "\004\000\002\034\005\000\002\034\006\000\002\034\004" +
    "\000\002\034\005\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\023\000\002\034\004\000\002" +
    "\034\003\000\002\034\004\000\002\034\004\000\002\034" +
    "\004\000\002\034\004\000\002\034\005\000\002\041\004" +
    "\000\002\043\005\000\002\047\004\000\002\050\004\000" +
    "\002\040\005\000\002\040\005\000\002\035\006\000\002" +
    "\035\005\000\002\035\003\000\002\032\005\000\002\032" +
    "\006\000\002\032\006\000\002\032\006\000\002\032\006" +
    "\000\002\032\006\000\002\032\010\000\002\032\007\000" +
    "\002\032\010\000\002\032\011\000\002\032\011\000\002" +
    "\032\011\000\002\032\006\000\002\032\006\000\002\032" +
    "\006\000\002\032\006\000\002\032\006\000\002\032\006" +
    "\000\002\032\005\000\002\037\006\000\002\037\005\000" +
    "\002\037\005\000\002\037\004\000\002\037\005\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\012\002\000\002\012\003\000\002\011\003\000" +
    "\002\011\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004\000\002\010\006\000\002\010\004\000\002\010" +
    "\004\000\002\014\003\000\002\013\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\006\000\002" +
    "\013\005\000\002\013\004\000\002\013\010\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\005" +
    "\000\002\003\005\000\002\003\003\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\007\003\000\002\007\004\000\002\051\003\000\002\051" +
    "\003\000\002\004\003\000\002\004\004\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\200\005\uffe6\037\125\040\121\041\045\042" +
    "\056\043\034\056\007\060\063\067\122\070\077\071\074" +
    "\072\031\073\132\074\025\075\055\100\111\101\114\102" +
    "\061\106\110\107\017\110\100\111\127\112\004\113\126" +
    "\114\046\120\012\121\106\122\112\123\021\127\027\130" +
    "\116\131\120\132\060\135\102\136\022\137\006\141\044" +
    "\142\133\143\005\144\101\145\057\151\020\152\010\153" +
    "\024\154\054\164\026\165\115\166\041\167\117\170\131" +
    "\174\072\201\067\202\066\203\123\205\051\206\036\207" +
    "\023\210\050\211\030\212\105\213\043\220\104\223\124" +
    "\001\002\000\004\005\uffb2\001\002\000\126\006\143\017" +
    "\146\020\204\021\172\022\205\023\175\024\155\025\165" +
    "\026\156\027\151\030\177\031\147\032\135\045\174\046" +
    "\164\047\167\050\134\051\157\052\137\053\171\054\201" +
    "\055\202\056\173\057\153\061\136\063\142\064\206\065" +
    "\211\066\162\075\144\076\160\077\200\104\150\124\176" +
    "\146\140\147\166\175\154\176\170\177\161\200\152\220" +
    "\207\223\203\001\002\000\006\221\214\222\215\001\002" +
    "\000\014\073\u0182\074\u0180\102\u017e\103\u0181\223\u017f\001" +
    "\002\000\014\005\uff6c\073\u0178\102\u0175\214\275\223\u0176" +
    "\001\002\000\004\005\ufffa\001\002\000\012\125\u0170\126" +
    "\u016f\221\214\222\215\001\002\000\004\005\ufff8\001\002" +
    "\000\004\005\ufff2\001\002\000\004\005\uffe8\001\002\000" +
    "\202\002\u016e\005\uffe6\037\125\040\121\041\045\042\056" +
    "\043\034\056\007\060\063\067\122\070\077\071\074\072" +
    "\031\073\132\074\025\075\055\100\111\101\114\102\061" +
    "\106\110\107\017\110\100\111\127\112\004\113\126\114" +
    "\046\120\012\121\106\122\112\123\021\127\027\130\116" +
    "\131\120\132\060\135\102\136\022\137\006\141\044\142" +
    "\133\143\005\144\101\145\057\151\020\152\010\153\024" +
    "\154\054\164\026\165\115\166\041\167\117\170\131\174" +
    "\072\201\067\202\066\203\123\205\051\206\036\207\023" +
    "\210\050\211\030\212\105\213\043\220\104\223\124\001" +
    "\002\000\004\005\uffb5\001\002\000\004\223\u016b\001\002" +
    "\000\006\221\214\222\215\001\002\000\004\005\uff8c\001" +
    "\002\000\004\223\u0168\001\002\000\004\221\u0166\001\002" +
    "\000\136\006\143\017\146\020\204\021\172\022\205\023" +
    "\175\024\155\025\165\026\156\027\151\030\177\031\147" +
    "\032\135\033\u015c\034\u0161\035\u015e\036\u0160\045\174\046" +
    "\164\047\167\050\134\051\157\052\137\053\171\054\201" +
    "\055\202\056\173\057\153\061\136\063\142\064\206\065" +
    "\211\066\162\075\144\076\160\077\200\104\u015f\124\176" +
    "\146\140\147\166\175\154\176\170\177\161\200\152\220" +
    "\207\223\203\001\002\000\004\223\u015a\001\002\000\132" +
    "\006\143\017\146\020\204\021\172\022\205\023\175\024" +
    "\155\025\165\026\156\027\151\030\177\031\147\032\135" +
    "\045\174\046\164\047\167\050\134\051\157\052\137\053" +
    "\171\054\201\055\202\056\173\057\153\061\136\063\142" +
    "\064\206\065\211\066\162\075\144\076\160\077\200\104" +
    "\150\124\176\146\140\147\166\175\154\176\170\177\161" +
    "\200\152\220\207\221\214\222\215\223\203\001\002\000" +
    "\006\005\uff6c\214\275\001\002\000\012\073\u012c\074\u012b" +
    "\102\u0129\223\u012a\001\002\000\004\005\uffee\001\002\000" +
    "\004\005\uffe9\001\002\000\004\221\u0127\001\002\000\004" +
    "\005\ufff0\001\002\000\004\223\u0124\001\002\000\004\005" +
    "\ufffd\001\002\000\004\005\ufffb\001\002\000\004\005\uff9a" +
    "\001\002\000\004\005\ufff1\001\002\000\130\006\uff6c\017" +
    "\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\025\uff6c" +
    "\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032\uff6c\045\uff6c\046" +
    "\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c\053\uff6c\054\uff6c" +
    "\055\uff6c\056\uff6c\057\uff6c\061\uff6c\063\uff6c\064\uff6c\065" +
    "\uff6c\066\uff6c\075\uff6c\076\uff6c\077\uff6c\104\uff6c\124\uff6c" +
    "\146\uff6c\147\uff6c\175\uff6c\176\uff6c\177\uff6c\200\uff6c\214" +
    "\275\220\uff6c\223\uff6c\001\002\000\126\006\143\017\146" +
    "\020\204\021\172\022\205\023\175\024\155\025\165\026" +
    "\156\027\151\030\177\031\147\032\135\045\174\046\164" +
    "\047\167\050\134\051\157\052\137\053\171\054\201\055" +
    "\202\056\173\057\153\061\136\063\142\064\206\065\211" +
    "\066\162\075\144\076\160\077\200\104\150\124\176\146" +
    "\140\147\166\175\154\176\170\177\161\200\152\220\207" +
    "\223\203\001\002\000\006\221\214\222\215\001\002\000" +
    "\004\005\uffb1\001\002\000\004\005\ufff7\001\002\000\006" +
    "\005\uff6c\214\275\001\002\000\126\006\143\017\146\020" +
    "\204\021\172\022\205\023\175\024\155\025\165\026\156" +
    "\027\151\030\177\031\147\032\135\045\174\046\164\047" +
    "\167\050\134\051\157\052\137\053\171\054\201\055\202" +
    "\056\173\057\153\061\136\063\142\064\206\065\211\066" +
    "\162\075\144\076\160\077\200\104\150\124\176\146\140" +
    "\147\166\175\154\176\170\177\161\200\152\220\207\223" +
    "\203\001\002\000\004\005\uffeb\001\002\000\202\002\uffff" +
    "\005\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\056" +
    "\uffff\060\uffff\067\uffff\070\uffff\071\uffff\072\uffff\073\uffff" +
    "\074\uffff\075\uffff\100\uffff\101\uffff\102\uffff\106\uffff\107" +
    "\uffff\110\uffff\111\uffff\112\uffff\113\uffff\114\uffff\120\uffff" +
    "\121\uffff\122\uffff\123\uffff\127\uffff\130\uffff\131\uffff\132" +
    "\uffff\135\uffff\136\uffff\137\uffff\141\uffff\142\uffff\143\uffff" +
    "\144\uffff\145\uffff\151\uffff\152\uffff\153\uffff\154\uffff\164" +
    "\uffff\165\uffff\166\uffff\167\uffff\170\uffff\174\uffff\201\uffff" +
    "\202\uffff\203\uffff\205\uffff\206\uffff\207\uffff\210\uffff\211" +
    "\uffff\212\uffff\213\uffff\220\uffff\223\uffff\001\002\000\004" +
    "\221\u011b\001\002\000\006\214\275\223\uff6c\001\002\000" +
    "\006\221\214\222\215\001\002\000\004\005\uffdf\001\002" +
    "\000\004\134\u0114\001\002\000\004\056\u0111\001\002\000" +
    "\004\005\u0110\001\002\000\010\073\374\102\372\223\373" +
    "\001\002\000\004\005\uffe7\001\002\000\004\005\ufff3\001" +
    "\002\000\006\005\uff6c\214\275\001\002\000\006\005\uff6c" +
    "\214\275\001\002\000\004\005\ufffc\001\002\000\004\005" +
    "\ufff5\001\002\000\004\223\367\001\002\000\004\005\uffef" +
    "\001\002\000\006\134\363\223\364\001\002\000\004\005" +
    "\uffec\001\002\000\004\005\uffea\001\002\000\004\223\362" +
    "\001\002\000\004\005\uffb4\001\002\000\126\006\143\017" +
    "\146\020\204\021\172\022\205\023\175\024\155\025\165" +
    "\026\156\027\151\030\177\031\147\032\135\045\174\046" +
    "\164\047\167\050\134\051\157\052\137\053\171\054\201" +
    "\055\202\056\173\057\153\061\136\063\142\064\206\065" +
    "\211\066\162\075\144\076\160\077\200\104\150\124\176" +
    "\146\140\147\166\175\154\176\170\177\161\200\152\220" +
    "\207\223\203\001\002\000\004\223\353\001\002\000\004" +
    "\005\ufff4\001\002\000\006\221\214\222\215\001\002\000" +
    "\130\006\uff6c\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c" +
    "\024\uff6c\025\uff6c\026\uff6c\027\uff6c\030\uff6c\031\uff6c\032" +
    "\uff6c\045\uff6c\046\uff6c\047\uff6c\050\uff6c\051\uff6c\052\uff6c" +
    "\053\uff6c\054\uff6c\055\uff6c\056\uff6c\057\uff6c\061\uff6c\063" +
    "\uff6c\064\uff6c\065\uff6c\066\uff6c\075\uff6c\076\uff6c\077\uff6c" +
    "\104\uff6c\124\uff6c\146\uff6c\147\uff6c\175\uff6c\176\uff6c\177" +
    "\uff6c\200\uff6c\214\275\220\uff6c\223\uff6c\001\002\000\006" +
    "\221\214\222\215\001\002\000\004\005\ufff9\001\002\000" +
    "\004\223\344\001\002\000\004\223\341\001\002\000\006" +
    "\221\214\222\215\001\002\000\004\005\ufff6\001\002\000" +
    "\006\214\275\223\uff6c\001\002\000\004\223\332\001\002" +
    "\000\134\005\uff6c\006\143\017\146\020\204\021\172\022" +
    "\205\023\175\024\155\025\165\026\156\027\151\030\177" +
    "\031\147\032\135\045\174\046\164\047\167\050\134\051" +
    "\157\052\137\053\171\054\201\055\202\056\173\057\153" +
    "\061\136\063\142\064\206\065\211\066\162\075\144\076" +
    "\160\077\200\104\150\124\176\134\326\146\140\147\166" +
    "\175\154\176\170\177\161\200\152\214\275\220\207\223" +
    "\327\001\002\000\006\005\uff6c\214\275\001\002\000\004" +
    "\134\322\001\002\000\004\223\320\001\002\000\126\006" +
    "\143\017\146\020\204\021\172\022\205\023\175\024\155" +
    "\025\165\026\156\027\151\030\177\031\147\032\135\045" +
    "\174\046\164\047\167\050\134\051\157\052\137\053\171" +
    "\054\201\055\202\056\173\057\153\061\136\063\142\064" +
    "\206\065\211\066\162\075\144\076\160\077\200\104\150" +
    "\124\176\146\140\147\166\175\154\176\170\177\161\200" +
    "\152\220\207\223\203\001\002\000\010\214\275\221\uff6c" +
    "\222\uff6c\001\002\000\006\005\uff6c\214\275\001\002\000" +
    "\006\221\214\222\215\001\002\000\126\006\143\017\146" +
    "\020\204\021\172\022\205\023\175\024\155\025\165\026" +
    "\156\027\151\030\177\031\147\032\135\045\174\046\164" +
    "\047\167\050\134\051\157\052\137\053\171\054\201\055" +
    "\202\056\173\057\153\061\136\063\142\064\206\065\211" +
    "\066\162\075\144\076\160\077\200\104\150\124\176\146" +
    "\140\147\166\175\154\176\170\177\161\200\152\220\207" +
    "\223\203\001\002\000\004\005\uffb3\001\002\000\004\005" +
    "\uffed\001\002\000\006\005\uff6c\214\275\001\002\000\006" +
    "\056\267\072\266\001\002\000\126\006\143\017\146\020" +
    "\204\021\172\022\205\023\175\024\155\025\165\026\156" +
    "\027\151\030\177\031\147\032\135\045\174\046\164\047" +
    "\167\050\134\051\157\052\137\053\171\054\201\055\202" +
    "\056\173\057\153\061\136\063\142\064\206\065\211\066" +
    "\162\075\144\076\160\077\200\104\150\124\176\146\140" +
    "\147\166\175\154\176\170\177\161\200\152\220\207\223" +
    "\203\001\002\000\004\223\265\001\002\000\006\221\214" +
    "\222\215\001\002\000\004\223\203\001\002\000\004\223" +
    "\203\001\002\000\016\005\uff34\007\uff34\014\uff34\015\uff34" +
    "\016\uff34\133\uff34\001\002\000\014\005\uff62\014\uff62\015" +
    "\220\016\221\133\uff62\001\002\000\016\005\uff4c\007\uff4c" +
    "\014\uff4c\015\uff4c\016\uff4c\133\uff4c\001\002\000\126\006" +
    "\143\017\146\020\204\021\172\022\205\023\175\024\155" +
    "\025\165\026\156\027\151\030\177\031\147\032\135\045" +
    "\174\046\164\047\167\050\134\051\157\052\137\053\171" +
    "\054\201\055\202\056\173\057\153\061\136\063\142\064" +
    "\206\065\211\066\162\075\144\076\160\077\200\104\150" +
    "\124\176\146\140\147\166\175\154\176\170\177\161\200" +
    "\152\220\207\223\203\001\002\000\016\005\uff48\007\uff48" +
    "\014\uff48\015\uff48\016\uff48\133\uff48\001\002\000\004\005" +
    "\uffe2\001\002\000\126\006\143\017\146\020\204\021\172" +
    "\022\205\023\175\024\155\025\165\026\156\027\151\030" +
    "\177\031\147\032\135\045\174\046\164\047\167\050\134" +
    "\051\157\052\137\053\171\054\201\055\202\056\173\057" +
    "\153\061\136\063\142\064\206\065\211\066\162\075\144" +
    "\076\160\077\200\104\150\124\176\146\140\147\166\175" +
    "\154\176\170\177\161\200\152\220\207\223\203\001\002" +
    "\000\126\006\143\017\146\020\204\021\172\022\205\023" +
    "\175\024\155\025\165\026\156\027\151\030\177\031\147" +
    "\032\135\045\174\046\164\047\167\050\134\051\157\052" +
    "\137\053\171\054\201\055\202\056\173\057\153\061\136" +
    "\063\142\064\206\065\211\066\162\075\144\076\160\077" +
    "\200\104\150\124\176\146\140\147\166\175\154\176\170" +
    "\177\161\200\152\220\207\223\203\001\002\000\016\005" +
    "\uff40\007\uff40\014\uff40\015\uff40\016\uff40\133\uff40\001\002" +
    "\000\004\223\203\001\002\000\016\005\uff43\007\uff43\014" +
    "\uff43\015\uff43\016\uff43\133\uff43\001\002\000\004\223\203" +
    "\001\002\000\016\005\uff45\007\uff45\014\uff45\015\uff45\016" +
    "\uff45\133\uff45\001\002\000\016\005\uff41\007\uff41\014\uff41" +
    "\015\uff41\016\uff41\133\uff41\001\002\000\006\217\244\221" +
    "\227\001\002\000\004\221\227\001\002\000\016\005\uff47" +
    "\007\uff47\014\uff47\015\uff47\016\uff47\133\uff47\001\002\000" +
    "\016\005\uff42\007\uff42\014\uff42\015\uff42\016\uff42\133\uff42" +
    "\001\002\000\016\005\uff4a\007\uff4a\014\uff4a\015\uff4a\016" +
    "\uff4a\133\uff4a\001\002\000\016\005\uff61\007\uff61\014\uff61" +
    "\015\uff61\016\uff61\133\uff61\001\002\000\004\223\242\001" +
    "\002\000\016\005\uff3f\007\uff3f\014\uff3f\015\uff3f\016\uff3f" +
    "\133\uff3f\001\002\000\004\221\241\001\002\000\004\221" +
    "\240\001\002\000\016\005\uff44\007\uff44\014\uff44\015\uff44" +
    "\016\uff44\133\uff44\001\002\000\004\223\203\001\002\000" +
    "\016\005\uff4e\007\uff4e\014\uff4e\015\uff4e\016\uff4e\133\uff4e" +
    "\001\002\000\004\223\203\001\002\000\004\221\227\001" +
    "\002\000\016\005\uff3e\007\uff3e\014\uff3e\015\uff3e\016\uff3e" +
    "\133\uff3e\001\002\000\004\221\227\001\002\000\006\221" +
    "\214\222\215\001\002\000\016\005\uff46\007\uff46\014\uff46" +
    "\015\uff46\016\uff46\133\uff46\001\002\000\126\006\143\017" +
    "\146\020\204\021\172\022\205\023\175\024\155\025\165" +
    "\026\156\027\151\030\177\031\147\032\135\045\174\046" +
    "\164\047\167\050\134\051\157\052\137\053\171\054\201" +
    "\055\202\056\173\057\153\061\136\063\142\064\206\065" +
    "\211\066\162\075\144\076\160\077\200\104\150\124\176" +
    "\146\140\147\166\175\154\176\170\177\161\200\152\220" +
    "\207\223\203\001\002\000\126\006\143\017\146\020\204" +
    "\021\172\022\205\023\175\024\155\025\165\026\156\027" +
    "\151\030\177\031\147\032\135\045\174\046\164\047\167" +
    "\050\134\051\157\052\137\053\171\054\201\055\202\056" +
    "\173\057\153\061\136\063\142\064\206\065\211\066\162" +
    "\075\144\076\160\077\200\104\150\124\176\146\140\147" +
    "\166\175\154\176\170\177\161\200\152\220\207\223\203" +
    "\001\002\000\020\005\uff32\007\uff32\014\uff32\015\uff32\016" +
    "\uff32\133\uff32\223\uff32\001\002\000\016\005\uff4f\007\uff4f" +
    "\014\uff4f\015\uff4f\016\uff4f\133\uff4f\001\002\000\016\005" +
    "\uff49\007\uff49\014\uff49\015\uff49\016\uff49\133\uff49\001\002" +
    "\000\016\005\uff4d\007\uff4d\014\uff4d\015\uff4d\016\uff4d\133" +
    "\uff4d\001\002\000\004\217\213\001\002\000\020\005\uff37" +
    "\007\uff37\014\uff37\015\uff37\016\uff37\133\uff37\223\212\001" +
    "\002\000\016\005\uff4b\007\uff4b\014\uff4b\015\uff4b\016\uff4b" +
    "\133\uff4b\001\002\000\020\005\uff31\007\uff31\014\uff31\015" +
    "\uff31\016\uff31\133\uff31\223\uff31\001\002\000\006\221\214" +
    "\222\215\001\002\000\150\005\uff30\006\uff30\007\uff30\014" +
    "\uff30\015\uff30\016\uff30\017\uff30\020\uff30\021\uff30\022\uff30" +
    "\023\uff30\024\uff30\025\uff30\026\uff30\027\uff30\030\uff30\031" +
    "\uff30\032\uff30\045\uff30\046\uff30\047\uff30\050\uff30\051\uff30" +
    "\052\uff30\053\uff30\054\uff30\055\uff30\056\uff30\057\uff30\061" +
    "\uff30\062\uff30\063\uff30\064\uff30\065\uff30\066\uff30\075\uff30" +
    "\076\uff30\077\uff30\104\uff30\124\uff30\133\uff30\146\uff30\147" +
    "\uff30\175\uff30\176\uff30\177\uff30\200\uff30\220\uff30\221\uff30" +
    "\222\uff30\223\uff30\001\002\000\150\005\uff2f\006\uff2f\007" +
    "\uff2f\014\uff2f\015\uff2f\016\uff2f\017\uff2f\020\uff2f\021\uff2f" +
    "\022\uff2f\023\uff2f\024\uff2f\025\uff2f\026\uff2f\027\uff2f\030" +
    "\uff2f\031\uff2f\032\uff2f\045\uff2f\046\uff2f\047\uff2f\050\uff2f" +
    "\051\uff2f\052\uff2f\053\uff2f\054\uff2f\055\uff2f\056\uff2f\057" +
    "\uff2f\061\uff2f\062\uff2f\063\uff2f\064\uff2f\065\uff2f\066\uff2f" +
    "\075\uff2f\076\uff2f\077\uff2f\104\uff2f\124\uff2f\133\uff2f\146" +
    "\uff2f\147\uff2f\175\uff2f\176\uff2f\177\uff2f\200\uff2f\220\uff2f" +
    "\221\uff2f\222\uff2f\223\uff2f\001\002\000\016\005\uff39\007" +
    "\uff39\014\uff39\015\uff39\016\uff39\133\uff39\001\002\000\016" +
    "\005\uff58\007\uff58\014\uff58\015\220\016\221\133\uff58\001" +
    "\002\000\126\006\143\017\146\020\204\021\172\022\205" +
    "\023\175\024\155\025\165\026\156\027\151\030\177\031" +
    "\147\032\135\045\174\046\164\047\167\050\134\051\157" +
    "\052\137\053\171\054\201\055\202\056\173\057\153\061" +
    "\136\063\142\064\206\065\211\066\162\075\144\076\160" +
    "\077\200\104\150\124\176\146\140\147\166\175\154\176" +
    "\170\177\161\200\152\220\207\223\203\001\002\000\126" +
    "\006\143\017\146\020\204\021\172\022\205\023\175\024" +
    "\155\025\165\026\156\027\151\030\177\031\147\032\135" +
    "\045\174\046\164\047\167\050\134\051\157\052\137\053" +
    "\171\054\201\055\202\056\173\057\153\061\136\063\142" +
    "\064\206\065\211\066\162\075\144\076\160\077\200\104" +
    "\150\124\176\146\140\147\166\175\154\176\170\177\161" +
    "\200\152\220\207\223\203\001\002\000\016\005\uff5e\007" +
    "\uff5e\014\uff5e\015\uff5e\016\uff5e\133\uff5e\001\002\000\016" +
    "\005\uff5f\007\uff5f\014\uff5f\015\uff5f\016\221\133\uff5f\001" +
    "\002\000\016\005\uff5c\007\uff5c\014\uff5c\015\220\016\221" +
    "\133\uff5c\001\002\000\126\006\143\017\146\020\204\021" +
    "\172\022\205\023\175\024\155\025\165\026\156\027\151" +
    "\030\177\031\147\032\135\045\174\046\164\047\167\050" +
    "\134\051\157\052\137\053\171\054\201\055\202\056\173" +
    "\057\153\061\136\063\142\064\206\065\211\066\162\075" +
    "\144\076\160\077\200\104\150\124\176\146\140\147\166" +
    "\175\154\176\170\177\161\200\152\220\207\223\203\001" +
    "\002\000\016\005\uff59\007\uff59\014\uff59\015\220\016\221" +
    "\133\uff59\001\002\000\020\005\uff2a\007\uff2a\014\uff2a\015" +
    "\uff2a\016\uff2a\133\233\221\uff2a\001\002\000\020\005\uff54" +
    "\007\uff54\014\uff54\015\uff54\016\uff54\133\uff54\221\227\001" +
    "\002\000\020\005\uff2e\007\uff2e\014\uff2e\015\uff2e\016\uff2e" +
    "\133\uff2e\221\uff2e\001\002\000\020\005\uff2d\007\uff2d\014" +
    "\uff2d\015\uff2d\016\uff2d\133\uff2d\221\uff2d\001\002\000\004" +
    "\221\234\001\002\000\020\005\uff29\007\uff29\014\uff29\015" +
    "\uff29\016\uff29\133\uff29\221\uff29\001\002\000\020\005\uff53" +
    "\007\uff53\014\uff53\015\uff53\016\uff53\133\uff53\221\227\001" +
    "\002\000\020\005\uff3b\007\uff3b\014\uff3b\015\uff3b\016\uff3b" +
    "\133\uff3b\223\212\001\002\000\020\005\uff3d\007\uff3d\014" +
    "\uff3d\015\uff3d\016\uff3d\133\uff3d\223\212\001\002\000\016" +
    "\005\uff52\007\uff52\014\uff52\015\uff52\016\uff52\133\uff52\001" +
    "\002\000\016\005\uff33\007\uff33\014\uff33\015\uff33\016\uff33" +
    "\133\uff33\001\002\000\016\005\uff35\007\uff35\014\uff35\015" +
    "\uff35\016\uff35\133\uff35\001\002\000\020\005\uff51\007\uff51" +
    "\014\uff51\015\uff51\016\uff51\133\uff51\221\227\001\002\000" +
    "\006\221\214\222\215\001\002\000\020\005\uff56\007\uff56" +
    "\014\uff56\015\uff56\016\uff56\133\uff56\221\227\001\002\000" +
    "\016\005\uff38\007\uff38\014\uff38\015\uff38\016\uff38\133\uff38" +
    "\001\002\000\020\005\uff3a\007\uff3a\014\uff3a\015\uff3a\016" +
    "\uff3a\133\uff3a\223\212\001\002\000\020\005\uff55\007\uff55" +
    "\014\uff55\015\uff55\016\uff55\133\uff55\223\212\001\002\000" +
    "\016\005\uff5b\007\uff5b\014\uff5b\015\220\016\221\133\uff5b" +
    "\001\002\000\016\005\uff5d\007\uff5d\014\uff5d\015\220\016" +
    "\221\133\uff5d\001\002\000\010\007\254\015\220\016\221" +
    "\001\002\000\016\005\uff60\007\uff60\014\uff60\015\uff60\016" +
    "\uff60\133\uff60\001\002\000\020\005\uff36\007\uff36\014\uff36" +
    "\015\uff36\016\uff36\133\uff36\223\212\001\002\000\020\005" +
    "\uff3c\007\uff3c\014\uff3c\015\uff3c\016\uff3c\133\uff3c\223\212" +
    "\001\002\000\004\062\260\001\002\000\132\006\143\017" +
    "\146\020\204\021\172\022\205\023\175\024\155\025\165" +
    "\026\156\027\151\030\177\031\147\032\135\045\174\046" +
    "\164\047\167\050\134\051\157\052\137\053\171\054\201" +
    "\055\202\056\173\057\153\061\136\063\142\064\206\065" +
    "\211\066\162\075\144\076\160\077\200\104\150\124\176" +
    "\146\140\147\166\175\154\176\170\177\161\200\152\220" +
    "\207\221\214\222\215\223\203\001\002\000\016\005\uff5a" +
    "\007\uff5a\014\uff5a\015\220\016\221\133\uff5a\001\002\000" +
    "\006\221\214\222\215\001\002\000\006\221\214\222\215" +
    "\001\002\000\016\005\uff57\007\uff57\014\uff57\015\uff57\016" +
    "\uff57\133\uff57\001\002\000\016\005\uff50\007\uff50\014\uff50" +
    "\015\uff50\016\uff50\133\uff50\001\002\000\004\223\271\001" +
    "\002\000\004\223\270\001\002\000\004\005\uffd5\001\002" +
    "\000\004\005\uffd4\001\002\000\136\005\uff6a\006\uff6a\017" +
    "\uff6a\020\uff6a\021\uff6a\022\uff6a\023\uff6a\024\uff6a\025\uff6a" +
    "\026\uff6a\027\uff6a\030\uff6a\031\uff6a\032\uff6a\045\uff6a\046" +
    "\uff6a\047\uff6a\050\uff6a\051\uff6a\052\uff6a\053\uff6a\054\uff6a" +
    "\055\uff6a\056\uff6a\057\uff6a\061\uff6a\063\uff6a\064\uff6a\065" +
    "\uff6a\066\uff6a\075\uff6a\076\uff6a\077\uff6a\104\uff6a\124\uff6a" +
    "\146\uff6a\147\uff6a\175\uff6a\176\uff6a\177\uff6a\200\uff6a\214" +
    "\uff6a\220\uff6a\221\uff6a\222\uff6a\223\uff6a\001\002\000\136" +
    "\005\uff6b\006\uff6b\017\uff6b\020\uff6b\021\uff6b\022\uff6b\023" +
    "\uff6b\024\uff6b\025\uff6b\026\uff6b\027\uff6b\030\uff6b\031\uff6b" +
    "\032\uff6b\045\uff6b\046\uff6b\047\uff6b\050\uff6b\051\uff6b\052" +
    "\uff6b\053\uff6b\054\uff6b\055\uff6b\056\uff6b\057\uff6b\061\uff6b" +
    "\063\uff6b\064\uff6b\065\uff6b\066\uff6b\075\uff6b\076\uff6b\077" +
    "\uff6b\104\uff6b\124\uff6b\146\uff6b\147\uff6b\175\uff6b\176\uff6b" +
    "\177\uff6b\200\uff6b\214\275\220\uff6b\221\uff6b\222\uff6b\223" +
    "\uff6b\001\002\000\004\005\uff91\001\002\000\016\013\302" +
    "\215\301\216\303\221\276\222\277\223\300\001\002\000" +
    "\136\005\uff67\006\uff67\017\uff67\020\uff67\021\uff67\022\uff67" +
    "\023\uff67\024\uff67\025\uff67\026\uff67\027\uff67\030\uff67\031" +
    "\uff67\032\uff67\045\uff67\046\uff67\047\uff67\050\uff67\051\uff67" +
    "\052\uff67\053\uff67\054\uff67\055\uff67\056\uff67\057\uff67\061" +
    "\uff67\063\uff67\064\uff67\065\uff67\066\uff67\075\uff67\076\uff67" +
    "\077\uff67\104\uff67\124\uff67\146\uff67\147\uff67\175\uff67\176" +
    "\uff67\177\uff67\200\uff67\214\uff67\220\uff67\221\uff67\222\uff67" +
    "\223\uff67\001\002\000\136\005\uff66\006\uff66\017\uff66\020" +
    "\uff66\021\uff66\022\uff66\023\uff66\024\uff66\025\uff66\026\uff66" +
    "\027\uff66\030\uff66\031\uff66\032\uff66\045\uff66\046\uff66\047" +
    "\uff66\050\uff66\051\uff66\052\uff66\053\uff66\054\uff66\055\uff66" +
    "\056\uff66\057\uff66\061\uff66\063\uff66\064\uff66\065\uff66\066" +
    "\uff66\075\uff66\076\uff66\077\uff66\104\uff66\124\uff66\146\uff66" +
    "\147\uff66\175\uff66\176\uff66\177\uff66\200\uff66\214\uff66\220" +
    "\uff66\221\uff66\222\uff66\223\uff66\001\002\000\136\005\uff68" +
    "\006\uff68\017\uff68\020\uff68\021\uff68\022\uff68\023\uff68\024" +
    "\uff68\025\uff68\026\uff68\027\uff68\030\uff68\031\uff68\032\uff68" +
    "\045\uff68\046\uff68\047\uff68\050\uff68\051\uff68\052\uff68\053" +
    "\uff68\054\uff68\055\uff68\056\uff68\057\uff68\061\uff68\063\uff68" +
    "\064\uff68\065\uff68\066\uff68\075\uff68\076\uff68\077\uff68\104" +
    "\uff68\124\uff68\146\uff68\147\uff68\175\uff68\176\uff68\177\uff68" +
    "\200\uff68\214\uff68\220\uff68\221\uff68\222\uff68\223\uff68\001" +
    "\002\000\136\005\uff64\006\uff64\017\uff64\020\uff64\021\uff64" +
    "\022\uff64\023\uff64\024\uff64\025\uff64\026\uff64\027\uff64\030" +
    "\uff64\031\uff64\032\uff64\045\uff64\046\uff64\047\uff64\050\uff64" +
    "\051\uff64\052\uff64\053\uff64\054\uff64\055\uff64\056\uff64\057" +
    "\uff64\061\uff64\063\uff64\064\uff64\065\uff64\066\uff64\075\uff64" +
    "\076\uff64\077\uff64\104\uff64\124\uff64\146\uff64\147\uff64\175" +
    "\uff64\176\uff64\177\uff64\200\uff64\214\uff64\220\uff64\221\uff64" +
    "\222\uff64\223\uff64\001\002\000\126\006\143\017\146\020" +
    "\204\021\172\022\205\023\175\024\155\025\165\026\156" +
    "\027\151\030\177\031\147\032\135\045\174\046\164\047" +
    "\167\050\134\051\157\052\137\053\171\054\201\055\202" +
    "\056\173\057\153\061\136\063\142\064\206\065\211\066" +
    "\162\075\144\076\160\077\200\104\150\124\176\146\140" +
    "\147\166\175\154\176\170\177\161\200\152\220\207\223" +
    "\203\001\002\000\136\005\uff63\006\uff63\017\uff63\020\uff63" +
    "\021\uff63\022\uff63\023\uff63\024\uff63\025\uff63\026\uff63\027" +
    "\uff63\030\uff63\031\uff63\032\uff63\045\uff63\046\uff63\047\uff63" +
    "\050\uff63\051\uff63\052\uff63\053\uff63\054\uff63\055\uff63\056" +
    "\uff63\057\uff63\061\uff63\063\uff63\064\uff63\065\uff63\066\uff63" +
    "\075\uff63\076\uff63\077\uff63\104\uff63\124\uff63\146\uff63\147" +
    "\uff63\175\uff63\176\uff63\177\uff63\200\uff63\214\uff63\220\uff63" +
    "\221\uff63\222\uff63\223\uff63\001\002\000\004\014\305\001" +
    "\002\000\136\005\uff65\006\uff65\017\uff65\020\uff65\021\uff65" +
    "\022\uff65\023\uff65\024\uff65\025\uff65\026\uff65\027\uff65\030" +
    "\uff65\031\uff65\032\uff65\045\uff65\046\uff65\047\uff65\050\uff65" +
    "\051\uff65\052\uff65\053\uff65\054\uff65\055\uff65\056\uff65\057" +
    "\uff65\061\uff65\063\uff65\064\uff65\065\uff65\066\uff65\075\uff65" +
    "\076\uff65\077\uff65\104\uff65\124\uff65\146\uff65\147\uff65\175" +
    "\uff65\176\uff65\177\uff65\200\uff65\214\uff65\220\uff65\221\uff65" +
    "\222\uff65\223\uff65\001\002\000\136\005\uff69\006\uff69\017" +
    "\uff69\020\uff69\021\uff69\022\uff69\023\uff69\024\uff69\025\uff69" +
    "\026\uff69\027\uff69\030\uff69\031\uff69\032\uff69\045\uff69\046" +
    "\uff69\047\uff69\050\uff69\051\uff69\052\uff69\053\uff69\054\uff69" +
    "\055\uff69\056\uff69\057\uff69\061\uff69\063\uff69\064\uff69\065" +
    "\uff69\066\uff69\075\uff69\076\uff69\077\uff69\104\uff69\124\uff69" +
    "\146\uff69\147\uff69\175\uff69\176\uff69\177\uff69\200\uff69\214" +
    "\uff69\220\uff69\221\uff69\222\uff69\223\uff69\001\002\000\004" +
    "\005\uffb0\001\002\000\126\006\143\017\146\020\204\021" +
    "\172\022\205\023\175\024\155\025\165\026\156\027\151" +
    "\030\177\031\147\032\135\045\174\046\164\047\167\050" +
    "\134\051\157\052\137\053\171\054\201\055\202\056\173" +
    "\057\153\061\136\063\142\064\206\065\211\066\162\075" +
    "\144\076\160\077\200\104\150\124\176\146\140\147\166" +
    "\175\154\176\170\177\161\200\152\220\207\223\203\001" +
    "\002\000\004\005\uffbd\001\002\000\004\005\uff96\001\002" +
    "\000\006\221\214\222\215\001\002\000\010\005\uff95\221" +
    "\214\222\215\001\002\000\010\005\uff2c\221\uff2c\222\uff2c" +
    "\001\002\000\010\005\uff2b\221\uff2b\222\uff2b\001\002\000" +
    "\004\005\uffde\001\002\000\126\006\143\017\146\020\204" +
    "\021\172\022\205\023\175\024\155\025\165\026\156\027" +
    "\151\030\177\031\147\032\135\045\174\046\164\047\167" +
    "\050\134\051\157\052\137\053\171\054\201\055\202\056" +
    "\173\057\153\061\136\063\142\064\206\065\211\066\162" +
    "\075\144\076\160\077\200\104\150\124\176\146\140\147" +
    "\166\175\154\176\170\177\161\200\152\220\207\223\203" +
    "\001\002\000\004\005\uffba\001\002\000\004\005\uff9f\001" +
    "\002\000\004\005\uff94\001\002\000\004\133\330\001\002" +
    "\000\004\005\uffa7\001\002\000\004\005\uffa6\001\002\000" +
    "\014\005\uffa5\015\uff32\016\uff32\133\uff32\223\uff32\001\002" +
    "\000\126\006\143\017\146\020\204\021\172\022\205\023" +
    "\175\024\155\025\165\026\156\027\151\030\177\031\147" +
    "\032\135\045\174\046\164\047\167\050\134\051\157\052" +
    "\137\053\171\054\201\055\202\056\173\057\153\061\136" +
    "\063\142\064\206\065\211\066\162\075\144\076\160\077" +
    "\200\104\150\124\176\146\140\147\166\175\154\176\170" +
    "\177\161\200\152\220\207\223\203\001\002\000\004\005" +
    "\uffa8\001\002\000\004\005\uffe0\001\002\000\004\223\334" +
    "\001\002\000\004\223\335\001\002\000\126\006\143\017" +
    "\146\020\204\021\172\022\205\023\175\024\155\025\165" +
    "\026\156\027\151\030\177\031\147\032\135\045\174\046" +
    "\164\047\167\050\134\051\157\052\137\053\171\054\201" +
    "\055\202\056\173\057\153\061\136\063\142\064\206\065" +
    "\211\066\162\075\144\076\160\077\200\104\150\124\176" +
    "\146\140\147\166\175\154\176\170\177\161\200\152\220" +
    "\207\223\203\001\002\000\004\005\uffb6\001\002\000\126" +
    "\006\143\017\146\020\204\021\172\022\205\023\175\024" +
    "\155\025\165\026\156\027\151\030\177\031\147\032\135" +
    "\045\174\046\164\047\167\050\134\051\157\052\137\053" +
    "\171\054\201\055\202\056\173\057\153\061\136\063\142" +
    "\064\206\065\211\066\162\075\144\076\160\077\200\104" +
    "\150\124\176\146\140\147\166\175\154\176\170\177\161" +
    "\200\152\220\207\223\203\001\002\000\004\005\uffbf\001" +
    "\002\000\004\221\342\001\002\000\126\006\143\017\146" +
    "\020\204\021\172\022\205\023\175\024\155\025\165\026" +
    "\156\027\151\030\177\031\147\032\135\045\174\046\164" +
    "\047\167\050\134\051\157\052\137\053\171\054\201\055" +
    "\202\056\173\057\153\061\136\063\142\064\206\065\211" +
    "\066\162\075\144\076\160\077\200\104\150\124\176\146" +
    "\140\147\166\175\154\176\170\177\161\200\152\220\207" +
    "\223\203\001\002\000\004\005\uffc0\001\002\000\126\006" +
    "\143\017\146\020\204\021\172\022\205\023\175\024\155" +
    "\025\165\026\156\027\151\030\177\031\147\032\135\045" +
    "\174\046\164\047\167\050\134\051\157\052\137\053\171" +
    "\054\201\055\202\056\173\057\153\061\136\063\142\064" +
    "\206\065\211\066\162\075\144\076\160\077\200\104\150" +
    "\124\176\146\140\147\166\175\154\176\170\177\161\200" +
    "\152\220\207\223\203\001\002\000\004\005\uffaf\001\002" +
    "\000\004\005\uffaa\001\002\000\126\006\143\017\146\020" +
    "\204\021\172\022\205\023\175\024\155\025\165\026\156" +
    "\027\151\030\177\031\147\032\135\045\174\046\164\047" +
    "\167\050\134\051\157\052\137\053\171\054\201\055\202" +
    "\056\173\057\153\061\136\063\142\064\206\065\211\066" +
    "\162\075\144\076\160\077\200\104\150\124\176\146\140" +
    "\147\166\175\154\176\170\177\161\200\152\220\207\223" +
    "\203\001\002\000\004\005\uff90\001\002\000\126\006\143" +
    "\017\146\020\204\021\172\022\205\023\175\024\155\025" +
    "\165\026\156\027\151\030\177\031\147\032\135\045\174" +
    "\046\164\047\167\050\134\051\157\052\137\053\171\054" +
    "\201\055\202\056\173\057\153\061\136\063\142\064\206" +
    "\065\211\066\162\075\144\076\160\077\200\104\150\124" +
    "\176\146\140\147\166\175\154\176\170\177\161\200\152" +
    "\220\207\223\203\001\002\000\004\005\uffb8\001\002\000" +
    "\012\115\355\116\357\117\360\223\356\001\002\000\004" +
    "\005\uffa3\001\002\000\130\005\uff6f\006\uff6f\017\uff6f\020" +
    "\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\025\uff6f\026\uff6f" +
    "\027\uff6f\030\uff6f\031\uff6f\032\uff6f\045\uff6f\046\uff6f\047" +
    "\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f" +
    "\056\uff6f\057\uff6f\061\uff6f\063\uff6f\064\uff6f\065\uff6f\066" +
    "\uff6f\075\uff6f\076\uff6f\077\uff6f\104\uff6f\124\uff6f\146\uff6f" +
    "\147\uff6f\175\uff6f\176\uff6f\177\uff6f\200\uff6f\220\uff6f\223" +
    "\uff6f\001\002\000\004\005\uffa0\001\002\000\130\005\uff6e" +
    "\006\uff6e\017\uff6e\020\uff6e\021\uff6e\022\uff6e\023\uff6e\024" +
    "\uff6e\025\uff6e\026\uff6e\027\uff6e\030\uff6e\031\uff6e\032\uff6e" +
    "\045\uff6e\046\uff6e\047\uff6e\050\uff6e\051\uff6e\052\uff6e\053" +
    "\uff6e\054\uff6e\055\uff6e\056\uff6e\057\uff6e\061\uff6e\063\uff6e" +
    "\064\uff6e\065\uff6e\066\uff6e\075\uff6e\076\uff6e\077\uff6e\104" +
    "\uff6e\124\uff6e\146\uff6e\147\uff6e\175\uff6e\176\uff6e\177\uff6e" +
    "\200\uff6e\220\uff6e\223\uff6e\001\002\000\130\005\uff6d\006" +
    "\uff6d\017\uff6d\020\uff6d\021\uff6d\022\uff6d\023\uff6d\024\uff6d" +
    "\025\uff6d\026\uff6d\027\uff6d\030\uff6d\031\uff6d\032\uff6d\045" +
    "\uff6d\046\uff6d\047\uff6d\050\uff6d\051\uff6d\052\uff6d\053\uff6d" +
    "\054\uff6d\055\uff6d\056\uff6d\057\uff6d\061\uff6d\063\uff6d\064" +
    "\uff6d\065\uff6d\066\uff6d\075\uff6d\076\uff6d\077\uff6d\104\uff6d" +
    "\124\uff6d\146\uff6d\147\uff6d\175\uff6d\176\uff6d\177\uff6d\200" +
    "\uff6d\220\uff6d\223\uff6d\001\002\000\004\005\uffe3\001\002" +
    "\000\004\005\uff9d\001\002\000\126\006\143\017\146\020" +
    "\204\021\172\022\205\023\175\024\155\025\165\026\156" +
    "\027\151\030\177\031\147\032\135\045\174\046\164\047" +
    "\167\050\134\051\157\052\137\053\171\054\201\055\202" +
    "\056\173\057\153\061\136\063\142\064\206\065\211\066" +
    "\162\075\144\076\160\077\200\104\150\124\176\146\140" +
    "\147\166\175\154\176\170\177\161\200\152\220\207\223" +
    "\203\001\002\000\126\006\143\017\146\020\204\021\172" +
    "\022\205\023\175\024\155\025\165\026\156\027\151\030" +
    "\177\031\147\032\135\045\174\046\164\047\167\050\134" +
    "\051\157\052\137\053\171\054\201\055\202\056\173\057" +
    "\153\061\136\063\142\064\206\065\211\066\162\075\144" +
    "\076\160\077\200\104\150\124\176\146\140\147\166\175" +
    "\154\176\170\177\161\200\152\220\207\223\203\001\002" +
    "\000\004\005\uffac\001\002\000\004\005\uffad\001\002\000" +
    "\004\005\uff99\001\002\000\004\005\uff92\001\002\000\004" +
    "\005\uff97\001\002\000\004\223\u010e\001\002\000\012\005" +
    "\uff6c\120\376\140\u0100\214\275\001\002\000\004\223\375" +
    "\001\002\000\004\005\uffd2\001\002\000\126\006\143\017" +
    "\146\020\204\021\172\022\205\023\175\024\155\025\165" +
    "\026\156\027\151\030\177\031\147\032\135\045\174\046" +
    "\164\047\167\050\134\051\157\052\137\053\171\054\201" +
    "\055\202\056\173\057\153\061\136\063\142\064\206\065" +
    "\211\066\162\075\144\076\160\077\200\104\150\124\176" +
    "\146\140\147\166\175\154\176\170\177\161\200\152\220" +
    "\207\223\203\001\002\000\004\005\uffc9\001\002\000\004" +
    "\221\u0101\001\002\000\026\044\u0102\105\u0105\106\u0103\115" +
    "\355\116\357\117\360\154\u0107\221\214\222\215\223\u0106" +
    "\001\002\000\006\221\214\222\215\001\002\000\004\223" +
    "\u010b\001\002\000\004\005\uffd1\001\002\000\010\115\355" +
    "\116\357\117\360\001\002\000\004\005\uffd0\001\002\000" +
    "\004\221\u0109\001\002\000\004\005\uffca\001\002\000\004" +
    "\005\uffcc\001\002\000\004\005\uffce\001\002\000\004\005" +
    "\uffcf\001\002\000\004\005\uffcd\001\002\000\004\005\uffcb" +
    "\001\002\000\004\223\u010f\001\002\000\004\005\uffd3\001" +
    "\002\000\202\002\ufffe\005\ufffe\037\ufffe\040\ufffe\041\ufffe" +
    "\042\ufffe\043\ufffe\056\ufffe\060\ufffe\067\ufffe\070\ufffe\071" +
    "\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\100\ufffe\101\ufffe" +
    "\102\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\112\ufffe\113" +
    "\ufffe\114\ufffe\120\ufffe\121\ufffe\122\ufffe\123\ufffe\127\ufffe" +
    "\130\ufffe\131\ufffe\132\ufffe\135\ufffe\136\ufffe\137\ufffe\141" +
    "\ufffe\142\ufffe\143\ufffe\144\ufffe\145\ufffe\151\ufffe\152\ufffe" +
    "\153\ufffe\154\ufffe\164\ufffe\165\ufffe\166\ufffe\167\ufffe\170" +
    "\ufffe\174\ufffe\201\ufffe\202\ufffe\203\ufffe\205\ufffe\206\ufffe" +
    "\207\ufffe\210\ufffe\211\ufffe\212\ufffe\213\ufffe\220\ufffe\223" +
    "\ufffe\001\002\000\004\223\u0112\001\002\000\006\005\uff8d" +
    "\223\u0113\001\002\000\004\005\uff8e\001\002\000\004\005" +
    "\uff9e\001\002\000\126\006\143\017\146\020\204\021\172" +
    "\022\205\023\175\024\155\025\165\026\156\027\151\030" +
    "\177\031\147\032\135\045\174\046\164\047\167\050\134" +
    "\051\157\052\137\053\171\054\201\055\202\056\173\057" +
    "\153\061\136\063\142\064\206\065\211\066\162\075\144" +
    "\076\160\077\200\104\150\124\176\146\140\147\166\175" +
    "\154\176\170\177\161\200\152\220\207\223\203\001\002" +
    "\000\004\005\uffbc\001\002\000\004\223\u0118\001\002\000" +
    "\004\223\u0119\001\002\000\126\006\143\017\146\020\204" +
    "\021\172\022\205\023\175\024\155\025\165\026\156\027" +
    "\151\030\177\031\147\032\135\045\174\046\164\047\167" +
    "\050\134\051\157\052\137\053\171\054\201\055\202\056" +
    "\173\057\153\061\136\063\142\064\206\065\211\066\162" +
    "\075\144\076\160\077\200\104\150\124\176\146\140\147" +
    "\166\175\154\176\170\177\161\200\152\220\207\223\203" +
    "\001\002\000\004\005\uffb7\001\002\000\126\006\143\017" +
    "\146\020\204\021\172\022\205\023\175\024\155\025\165" +
    "\026\156\027\151\030\177\031\147\032\135\045\174\046" +
    "\164\047\167\050\134\051\157\052\137\053\171\054\201" +
    "\055\202\056\173\057\153\061\136\063\142\064\206\065" +
    "\211\066\162\075\144\076\160\077\200\104\150\124\176" +
    "\146\140\147\166\175\154\176\170\177\161\200\152\220" +
    "\207\223\203\001\002\000\004\005\uffae\001\002\000\004" +
    "\005\uffa1\001\002\000\004\005\uffdd\001\002\000\126\006" +
    "\143\017\146\020\204\021\172\022\205\023\175\024\155" +
    "\025\165\026\156\027\151\030\177\031\147\032\135\045" +
    "\174\046\164\047\167\050\134\051\157\052\137\053\171" +
    "\054\201\055\202\056\173\057\153\061\136\063\142\064" +
    "\206\065\211\066\162\075\144\076\160\077\200\104\150" +
    "\124\176\146\140\147\166\175\154\176\170\177\161\200" +
    "\152\220\207\223\203\001\002\000\004\005\uffbe\001\002" +
    "\000\004\005\uffe5\001\002\000\126\006\143\017\146\020" +
    "\204\021\172\022\205\023\175\024\155\025\165\026\156" +
    "\027\151\030\177\031\147\032\135\045\174\046\164\047" +
    "\167\050\134\051\157\052\137\053\171\054\201\055\202" +
    "\056\173\057\153\061\136\063\142\064\206\065\211\066" +
    "\162\075\144\076\160\077\200\104\150\124\176\146\140" +
    "\147\166\175\154\176\170\177\161\200\152\220\207\223" +
    "\203\001\002\000\004\005\uff8f\001\002\000\004\223\u0125" +
    "\001\002\000\126\006\143\017\146\020\204\021\172\022" +
    "\205\023\175\024\155\025\165\026\156\027\151\030\177" +
    "\031\147\032\135\045\174\046\164\047\167\050\134\051" +
    "\157\052\137\053\171\054\201\055\202\056\173\057\153" +
    "\061\136\063\142\064\206\065\211\066\162\075\144\076" +
    "\160\077\200\104\150\124\176\146\140\147\166\175\154" +
    "\176\170\177\161\200\152\220\207\223\203\001\002\000" +
    "\004\005\uffa2\001\002\000\126\006\143\017\146\020\204" +
    "\021\172\022\205\023\175\024\155\025\165\026\156\027" +
    "\151\030\177\031\147\032\135\045\174\046\164\047\167" +
    "\050\134\051\157\052\137\053\171\054\201\055\202\056" +
    "\173\057\153\061\136\063\142\064\206\065\211\066\162" +
    "\075\144\076\160\077\200\104\150\124\176\146\140\147" +
    "\166\175\154\176\170\177\161\200\152\220\207\223\203" +
    "\001\002\000\004\005\uffbb\001\002\000\004\223\u0153\001" +
    "\002\000\026\005\uff6c\044\u0130\074\u0135\106\u0131\120\u0134" +
    "\152\u0132\154\u0137\162\u0138\163\u0136\214\275\001\002\000" +
    "\004\223\u012e\001\002\000\004\223\u012d\001\002\000\004" +
    "\005\uff8b\001\002\000\010\115\355\116\357\117\360\001" +
    "\002\000\004\005\uff89\001\002\000\006\221\214\222\215" +
    "\001\002\000\004\223\u0151\001\002\000\016\130\u0140\156" +
    "\u0142\157\u013f\160\u0143\161\u0141\223\u013e\001\002\000\004" +
    "\005\uff79\001\002\000\004\223\u013d\001\002\000\010\115" +
    "\355\116\357\117\360\001\002\000\004\223\u013b\001\002" +
    "\000\004\221\u013a\001\002\000\010\115\355\116\357\117" +
    "\360\001\002\000\004\005\uff87\001\002\000\004\005\uff7d" +
    "\001\002\000\004\005\uff7b\001\002\000\004\005\uff88\001" +
    "\002\000\004\005\uff7c\001\002\000\010\005\uff86\221\214" +
    "\222\215\001\002\000\004\223\u014c\001\002\000\004\223" +
    "\u014a\001\002\000\004\223\u0147\001\002\000\004\005\uff7a" +
    "\001\002\000\004\223\u0144\001\002\000\006\221\214\222" +
    "\215\001\002\000\126\006\143\017\146\020\204\021\172" +
    "\022\205\023\175\024\155\025\165\026\156\027\151\030" +
    "\177\031\147\032\135\045\174\046\164\047\167\050\134" +
    "\051\157\052\137\053\171\054\201\055\202\056\173\057" +
    "\153\061\136\063\142\064\206\065\211\066\162\075\144" +
    "\076\160\077\200\104\150\124\176\146\140\147\166\175" +
    "\154\176\170\177\161\200\152\220\207\223\203\001\002" +
    "\000\004\005\uff81\001\002\000\006\221\214\222\215\001" +
    "\002\000\126\006\143\017\146\020\204\021\172\022\205" +
    "\023\175\024\155\025\165\026\156\027\151\030\177\031" +
    "\147\032\135\045\174\046\164\047\167\050\134\051\157" +
    "\052\137\053\171\054\201\055\202\056\173\057\153\061" +
    "\136\063\142\064\206\065\211\066\162\075\144\076\160" +
    "\077\200\104\150\124\176\146\140\147\166\175\154\176" +
    "\170\177\161\200\152\220\207\223\203\001\002\000\004" +
    "\005\uff80\001\002\000\126\006\143\017\146\020\204\021" +
    "\172\022\205\023\175\024\155\025\165\026\156\027\151" +
    "\030\177\031\147\032\135\045\174\046\164\047\167\050" +
    "\134\051\157\052\137\053\171\054\201\055\202\056\173" +
    "\057\153\061\136\063\142\064\206\065\211\066\162\075" +
    "\144\076\160\077\200\104\150\124\176\146\140\147\166" +
    "\175\154\176\170\177\161\200\152\220\207\223\203\001" +
    "\002\000\004\005\uff83\001\002\000\006\221\214\222\215" +
    "\001\002\000\126\006\143\017\146\020\204\021\172\022" +
    "\205\023\175\024\155\025\165\026\156\027\151\030\177" +
    "\031\147\032\135\045\174\046\164\047\167\050\134\051" +
    "\157\052\137\053\171\054\201\055\202\056\173\057\153" +
    "\061\136\063\142\064\206\065\211\066\162\075\144\076" +
    "\160\077\200\104\150\124\176\146\140\147\166\175\154" +
    "\176\170\177\161\200\152\220\207\223\203\001\002\000" +
    "\004\005\uff82\001\002\000\010\005\uff84\221\214\222\215" +
    "\001\002\000\004\005\uff85\001\002\000\004\005\uff7f\001" +
    "\002\000\004\005\uff7e\001\002\000\004\223\u0154\001\002" +
    "\000\004\005\uff8a\001\002\000\004\005\uffa4\001\002\000" +
    "\004\005\uffab\001\002\000\006\221\214\222\215\001\002" +
    "\000\006\221\214\222\215\001\002\000\004\005\uffa9\001" +
    "\002\000\004\005\uff9b\001\002\000\134\006\143\017\146" +
    "\020\204\021\172\022\205\023\175\024\155\025\165\026" +
    "\156\027\151\030\177\031\147\032\135\045\174\046\164" +
    "\047\167\050\134\051\157\052\137\053\171\054\201\055" +
    "\202\056\173\057\153\061\136\063\142\064\206\065\211" +
    "\066\162\075\144\076\160\077\200\104\150\115\355\116" +
    "\357\117\360\124\176\146\140\147\166\175\154\176\170" +
    "\177\161\200\152\220\207\223\203\001\002\000\134\006" +
    "\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\025\uff73\026\uff73\027\uff73\030\uff73\031\uff73\032\uff73\045" +
    "\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73" +
    "\054\uff73\055\uff73\056\uff73\057\uff73\061\uff73\063\uff73\064" +
    "\uff73\065\uff73\066\uff73\075\uff73\076\uff73\077\uff73\104\uff73" +
    "\115\uff73\116\uff73\117\uff73\124\uff73\146\uff73\147\uff73\175" +
    "\uff73\176\uff73\177\uff73\200\uff73\220\uff73\223\uff73\001\002" +
    "\000\004\005\uffc8\001\002\000\134\006\uff72\017\uff72\020" +
    "\uff72\021\uff72\022\uff72\023\uff72\024\uff72\025\uff72\026\uff72" +
    "\027\uff72\030\uff72\031\uff72\032\uff72\045\uff72\046\uff72\047" +
    "\uff72\050\uff72\051\uff72\052\uff72\053\uff72\054\uff72\055\uff72" +
    "\056\uff72\057\uff72\061\uff72\063\uff72\064\uff72\065\uff72\066" +
    "\uff72\075\uff72\076\uff72\077\uff72\104\uff72\115\uff72\116\uff72" +
    "\117\uff72\124\uff72\146\uff72\147\uff72\175\uff72\176\uff72\177" +
    "\uff72\200\uff72\220\uff72\223\uff72\001\002\000\134\005\uff40" +
    "\006\143\015\uff40\016\uff40\017\146\020\204\021\172\022" +
    "\205\023\175\024\155\025\165\026\156\027\151\030\177" +
    "\031\147\032\135\045\174\046\164\047\167\050\134\051" +
    "\157\052\137\053\171\054\201\055\202\056\173\057\153" +
    "\061\136\063\142\064\206\065\211\066\162\075\144\076" +
    "\160\077\200\104\150\124\176\146\140\147\166\175\154" +
    "\176\170\177\161\200\152\220\207\223\203\001\002\000" +
    "\134\006\uff71\017\uff71\020\uff71\021\uff71\022\uff71\023\uff71" +
    "\024\uff71\025\uff71\026\uff71\027\uff71\030\uff71\031\uff71\032" +
    "\uff71\045\uff71\046\uff71\047\uff71\050\uff71\051\uff71\052\uff71" +
    "\053\uff71\054\uff71\055\uff71\056\uff71\057\uff71\061\uff71\063" +
    "\uff71\064\uff71\065\uff71\066\uff71\075\uff71\076\uff71\077\uff71" +
    "\104\uff71\115\uff71\116\uff71\117\uff71\124\uff71\146\uff71\147" +
    "\uff71\175\uff71\176\uff71\177\uff71\200\uff71\220\uff71\223\uff71" +
    "\001\002\000\134\006\uff70\017\uff70\020\uff70\021\uff70\022" +
    "\uff70\023\uff70\024\uff70\025\uff70\026\uff70\027\uff70\030\uff70" +
    "\031\uff70\032\uff70\045\uff70\046\uff70\047\uff70\050\uff70\051" +
    "\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70" +
    "\061\uff70\063\uff70\064\uff70\065\uff70\066\uff70\075\uff70\076" +
    "\uff70\077\uff70\104\uff70\115\uff70\116\uff70\117\uff70\124\uff70" +
    "\146\uff70\147\uff70\175\uff70\176\uff70\177\uff70\200\uff70\220" +
    "\uff70\223\uff70\001\002\000\004\005\uffc5\001\002\000\004" +
    "\005\uffc7\001\002\000\126\006\143\017\146\020\204\021" +
    "\172\022\205\023\175\024\155\025\165\026\156\027\151" +
    "\030\177\031\147\032\135\045\174\046\164\047\167\050" +
    "\134\051\157\052\137\053\171\054\201\055\202\056\173" +
    "\057\153\061\136\063\142\064\206\065\211\066\162\075" +
    "\144\076\160\077\200\104\150\124\176\146\140\147\166" +
    "\175\154\176\170\177\161\200\152\220\207\223\203\001" +
    "\002\000\004\005\uffc6\001\002\000\006\005\uff6c\214\275" +
    "\001\002\000\004\005\uff93\001\002\000\004\005\uff98\001" +
    "\002\000\126\006\143\017\146\020\204\021\172\022\205" +
    "\023\175\024\155\025\165\026\156\027\151\030\177\031" +
    "\147\032\135\045\174\046\164\047\167\050\134\051\157" +
    "\052\137\053\171\054\201\055\202\056\173\057\153\061" +
    "\136\063\142\064\206\065\211\066\162\075\144\076\160" +
    "\077\200\104\150\124\176\146\140\147\166\175\154\176" +
    "\170\177\161\200\152\220\207\223\203\001\002\000\004" +
    "\005\uffb9\001\002\000\126\006\143\017\146\020\204\021" +
    "\172\022\205\023\175\024\155\025\165\026\156\027\151" +
    "\030\177\031\147\032\135\045\174\046\164\047\167\050" +
    "\134\051\157\052\137\053\171\054\201\055\202\056\173" +
    "\057\153\061\136\063\142\064\206\065\211\066\162\075" +
    "\144\076\160\077\200\104\150\124\176\146\140\147\166" +
    "\175\154\176\170\177\161\200\152\220\207\223\203\001" +
    "\002\000\004\005\uffe1\001\002\000\202\002\001\005\001" +
    "\037\001\040\001\041\001\042\001\043\001\056\001\060" +
    "\001\067\001\070\001\071\001\072\001\073\001\074\001" +
    "\075\001\100\001\101\001\102\001\106\001\107\001\110" +
    "\001\111\001\112\001\113\001\114\001\120\001\121\001" +
    "\122\001\123\001\127\001\130\001\131\001\132\001\135" +
    "\001\136\001\137\001\141\001\142\001\143\001\144\001" +
    "\145\001\151\001\152\001\153\001\154\001\164\001\165" +
    "\001\166\001\167\001\170\001\174\001\201\001\202\001" +
    "\203\001\205\001\206\001\207\001\210\001\211\001\212" +
    "\001\213\001\220\001\223\001\001\002\000\004\002\000" +
    "\001\002\000\006\221\214\222\215\001\002\000\006\221" +
    "\214\222\215\001\002\000\010\005\uffc4\221\214\222\215" +
    "\001\002\000\004\005\uffc3\001\002\000\004\005\uffc2\001" +
    "\002\000\004\005\uffc1\001\002\000\004\223\u017c\001\002" +
    "\000\006\155\u017b\161\u017a\001\002\000\004\005\uff75\001" +
    "\002\000\004\223\u0179\001\002\000\004\005\uff74\001\002" +
    "\000\004\005\uff76\001\002\000\004\005\uff77\001\002\000" +
    "\004\223\u017d\001\002\000\004\005\uff78\001\002\000\004" +
    "\223\u018b\001\002\000\004\223\u0189\001\002\000\004\223" +
    "\u0186\001\002\000\004\223\u0184\001\002\000\004\223\u0183" +
    "\001\002\000\004\005\uffd6\001\002\000\004\223\u0185\001" +
    "\002\000\004\005\uffdc\001\002\000\012\115\355\116\357" +
    "\117\360\223\u0188\001\002\000\004\005\uffd9\001\002\000" +
    "\004\005\uffd7\001\002\000\010\115\355\116\357\117\360" +
    "\001\002\000\004\005\uffd8\001\002\000\006\005\uffda\223" +
    "\u018c\001\002\000\004\005\uffdb\001\002\000\006\221\214" +
    "\222\215\001\002\000\006\221\214\222\215\001\002\000" +
    "\006\221\214\222\215\001\002\000\006\221\214\222\215" +
    "\001\002\000\006\221\214\222\215\001\002\000\006\221" +
    "\214\222\215\001\002\000\006\221\214\222\215\001\002" +
    "\000\006\221\214\222\215\001\002\000\006\221\214\222" +
    "\215\001\002\000\006\221\214\222\215\001\002\000\006" +
    "\221\214\222\215\001\002\000\006\221\214\222\215\001" +
    "\002\000\006\221\214\222\215\001\002\000\006\221\214" +
    "\222\215\001\002\000\006\221\214\222\215\001\002\000" +
    "\004\005\uff9c\001\002\000\004\005\uffe4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u019b\000\066\017\015\020\052\021\061\022\036\023" +
    "\067\024\037\025\010\026\106\027\012\030\046\031\112" +
    "\032\070\033\034\034\102\035\064\036\013\037\041\040" +
    "\072\041\031\042\127\043\074\044\051\045\075\046\032" +
    "\047\014\050\063\001\001\000\002\001\001\000\012\003" +
    "\162\007\207\013\140\014\u019c\001\001\000\004\051\u018c" +
    "\001\001\000\002\001\001\000\010\010\271\011\272\012" +
    "\u0176\001\001\000\002\001\001\000\004\051\u0170\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\020\u016c\021\061\022\036\023\067\024\037\025\010" +
    "\026\106\027\012\030\046\031\112\032\070\033\034\034" +
    "\102\035\064\036\013\037\041\040\072\041\031\042\127" +
    "\043\074\044\051\045\075\046\032\047\014\050\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\u0168" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\003\162\007\207\013\140\014\u015c\015\u015a" +
    "\001\001\000\002\001\001\000\014\003\162\007\207\013" +
    "\140\014\u0155\051\u0156\001\001\000\010\010\271\011\272" +
    "\012\u0154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\271\011\272\012\u0121" +
    "\001\001\000\012\003\162\007\207\013\140\014\u0120\001" +
    "\001\000\004\051\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\271\011\272\012\u011d\001\001\000" +
    "\012\003\162\007\207\013\140\014\u011c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\271\011\272\012\u0116\001\001\000\004\051\u0114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\271\011\272\012\370\001\001\000" +
    "\010\010\271\011\272\012\367\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\162\007\207\013" +
    "\140\014\360\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\350\001\001\000\010\010\271\011\272\012" +
    "\346\001\001\000\004\051\345\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\051\336\001" +
    "\001\000\002\001\001\000\010\010\271\011\272\012\332" +
    "\001\001\000\002\001\001\000\020\003\162\007\207\010" +
    "\271\011\272\012\324\013\140\014\323\001\001\000\010" +
    "\010\271\011\272\012\322\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\162\007\207\013\140\014\316" +
    "\001\001\000\010\010\271\011\272\012\312\001\001\000" +
    "\010\010\271\011\272\012\311\001\001\000\004\051\307" +
    "\001\001\000\012\003\162\007\207\013\140\014\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\271" +
    "\011\272\012\273\001\001\000\002\001\001\000\012\003" +
    "\162\007\207\013\140\014\144\001\001\000\002\001\001" +
    "\000\004\051\256\001\001\000\004\007\255\001\001\000" +
    "\004\007\254\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\162\007\207\013\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\162" +
    "\007\207\013\251\001\001\000\010\003\162\007\207\013" +
    "\250\001\001\000\002\001\001\000\004\007\247\001\001" +
    "\000\002\001\001\000\004\007\246\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\244\006\230\001\001" +
    "\000\006\004\242\006\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\236\001\001\000\002" +
    "\001\001\000\004\007\235\001\001\000\006\004\234\006" +
    "\230\001\001\000\002\001\001\000\006\004\227\006\230" +
    "\001\001\000\004\051\224\001\001\000\002\001\001\000" +
    "\010\003\162\007\207\013\223\001\001\000\010\003\162" +
    "\007\207\013\216\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\215\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\162\007" +
    "\207\013\222\001\001\000\010\003\162\007\207\013\221" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\003\162\007\207\013\225\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\231\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\231\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\231\001\001\000\004\051\245\001" +
    "\001\000\004\006\231\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\162\007" +
    "\207\013\260\051\261\001\001\000\002\001\001\000\004" +
    "\051\262\001\001\000\004\051\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\305\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\162\007\207\013\140\014\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\162" +
    "\007\207\013\140\014\310\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\313\051\314\001\001\000\004" +
    "\051\315\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\162\007\207\013\140\014\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\162\007\207\013\140\014" +
    "\330\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\162\007\207\013" +
    "\140\014\335\001\001\000\002\001\001\000\012\003\162" +
    "\007\207\013\140\014\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\003\162\007\207\013\140\014\342" +
    "\001\001\000\002\001\001\000\012\003\162\007\207\013" +
    "\140\014\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\162\007\207\013\140\014\347\001\001\000" +
    "\002\001\001\000\012\003\162\007\207\013\140\014\351" +
    "\001\001\000\002\001\001\000\004\016\353\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\162\007\207\013\140\014\365\001\001" +
    "\000\012\003\162\007\207\013\140\014\364\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\271\011\272\012\376\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\162\007\207\013\140\014\u010c\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\u0107" +
    "\051\u0103\001\001\000\004\051\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\162\007\207\013" +
    "\140\014\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\162\007\207\013\140\014" +
    "\u0119\001\001\000\002\001\001\000\012\003\162\007\207" +
    "\013\140\014\u011b\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\003\162\007\207\013\140" +
    "\014\u011f\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\162\007\207\013\140\014\u0122\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\162\007\207\013" +
    "\140\014\u0125\001\001\000\002\001\001\000\012\003\162" +
    "\007\207\013\140\014\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\271\011\272\012\u0132\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\u012e\001\001\000\002\001\001\000\004\051\u0151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u013b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\u0138\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u014e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\u0144\001\001\000" +
    "\012\003\162\007\207\013\140\014\u0145\001\001\000\002" +
    "\001\001\000\004\051\u0147\001\001\000\012\003\162\007" +
    "\207\013\140\014\u0148\001\001\000\002\001\001\000\012" +
    "\003\162\007\207\013\140\014\u014a\001\001\000\002\001" +
    "\001\000\004\051\u014c\001\001\000\012\003\162\007\207" +
    "\013\140\014\u014d\001\001\000\002\001\001\000\004\051" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\u0157\001\001\000\004" +
    "\051\u0158\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\003\162\007\207\013\140\014\u0162\016\u0163\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\003\162\007\207\013\140\014\u0161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\003\162\007\207\013\140\014\u0164\001\001" +
    "\000\002\001\001\000\010\010\271\011\272\012\u0166\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\003\162" +
    "\007\207\013\140\014\u0169\001\001\000\002\001\001\000" +
    "\012\003\162\007\207\013\140\014\u016b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u0173\001\001\000\004\051\u0172\001\001\000\004\051\u0171" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\u0186\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\u0189\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\051" +
    "\u018d\001\001\000\004\051\u018e\001\001\000\004\051\u018f" +
    "\001\001\000\004\051\u0190\001\001\000\004\051\u0191\001" +
    "\001\000\004\051\u0192\001\001\000\004\051\u0193\001\001" +
    "\000\004\051\u0194\001\001\000\004\051\u0195\001\001\000" +
    "\004\051\u0196\001\001\000\004\051\u0197\001\001\000\004" +
    "\051\u0198\001\001\000\004\051\u0199\001\001\000\004\051" +
    "\u019a\001\001\000\004\051\u019b\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static String urlContents = null;

	StringBuffer urlContentsBuffer = new StringBuffer(4096);

	public static String getUrlContents(){
		return urlContents;
	}

	public static MoleculeRenderer renderer = null;

	public static void setMoleculeRenderer(MoleculeRenderer r){
		renderer = r;
	}

	public static Hashtable definitions = new Hashtable();

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // id ::= INTEGER TO INTEGER 
            {
              int[] RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int range[] = new int[2];
			range[0] = r.intValue();
			range[1] = l.intValue();
			RESULT = range;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // id ::= INTEGER 
            {
              int[] RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int range[] = new int[2];
			range[0] = n.intValue();
			range[1] = n.intValue();
			RESULT = range;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // number_list ::= number_list number 
            {
              FloatArray RESULT = null;
		int faleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FloatArray fa = (FloatArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 fa.add((float)f.doubleValue()); RESULT = fa; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*number_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // number_list ::= number 
            {
              FloatArray RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 FloatArray fa = new FloatArray(); fa.add((float)f.doubleValue()); RESULT = fa; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*number_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // id_list ::= id_list id 
            {
              Vector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int[] i = (int[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v.addElement(i); RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*id_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // id_list ::= id 
            {
              Vector RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		int[] i = (int[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Vector v = new Vector(); v.addElement(i); RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*id_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // number ::= DOUBLE 
            {
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // number ::= INTEGER 
            {
              Double RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double((double)i.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // string_list ::= string_list STRING 
            {
              Vector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 v.addElement(s); RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*string_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // string_list ::= STRING 
            {
              Vector RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Vector v = new Vector(); v.addElement(s); RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*string_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // statement ::= PEEK INTEGER 
            {
              byte[] RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray selectedAtoms = parser.renderer.peekSelection(i.intValue());

			RESULT = Selection.arrayToMask(parser.renderer, selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // statement ::= POP 
            {
              byte[] RESULT = null;
		
			DynamicArray selectedAtoms = parser.renderer.popSelection();

			if(selectedAtoms != null){
				RESULT = Selection.arrayToMask(parser.renderer, selectedAtoms);
			}else{
				RESULT = Selection.none(parser.renderer);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // statement ::= GROUP STRING 
            {
              byte[] RESULT = null;
		int definitionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int definitionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String definition = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Hashtable group =
				(Hashtable)parser.renderer.groups.get(definition);
			if(group == null){
				System.out.println("attempt to use undefined group " + definition);
				RESULT = Selection.none(parser.renderer);
			}else{
				RESULT = Selection.group(parser.renderer, group);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // statement ::= COMPOSITE string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.composite(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // statement ::= string_list 
            {
              byte[] RESULT = null;
		int compositesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int compositesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector composites = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		   	//RESULT = Selection.hierarchy(parser.renderer, composites);
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // statement ::= ID OPERATOR number 
            {
              byte[] RESULT = null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = Selection.attribute(parser.renderer,
		 					Atom.ID,
							o.intValue(),
		 					d.doubleValue());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // statement ::= ATTRIBUTE OPERATOR number 
            {
              byte[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer o = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = Selection.attribute(parser.renderer,
		 					a.intValue(),
							o.intValue(),
		 					d.doubleValue());
		
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // statement ::= MOLEXACT string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.moleculeExact(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // statement ::= MOLECULE string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.molecule(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // statement ::= CHAIN string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.chain(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // statement ::= NAME string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.name(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // statement ::= DEFAULT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.defaultSelection(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // statement ::= DISPLAYED 
            {
              byte[] RESULT = null;
		 RESULT = Selection.displayed(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // statement ::= WIDE 
            {
              byte[] RESULT = null;
		 RESULT = Selection.wide(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // statement ::= LABELLED 
            {
              byte[] RESULT = null;
		 RESULT = Selection.labelled(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // statement ::= XRAY 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.ModellingXray); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // statement ::= FIXED 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.ModellingFixed); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // statement ::= ENVIRONMENT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.ModellingEnvironment); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // statement ::= ACTIVE 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.ModellingActive); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // statement ::= PROPERTY 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.Property); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // statement ::= CONTEXT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.SurfaceContext); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // statement ::= SURFACE 
            {
              byte[] RESULT = null;
		 RESULT = Selection.property(parser.renderer, Atom.Surface); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // statement ::= CURRENT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.current(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // statement ::= IONS 
            {
              byte[] RESULT = null;
		 RESULT = Selection.ions(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // statement ::= DNA 
            {
              byte[] RESULT = null;
		 RESULT = Selection.dna(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // statement ::= SOLVENT 
            {
              byte[] RESULT = null;
		 RESULT = Selection.solvent(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // statement ::= AMINOACID 
            {
              byte[] RESULT = null;
		 RESULT = Selection.aminoacid(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // statement ::= NONE 
            {
              byte[] RESULT = null;
		 RESULT = Selection.none(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // statement ::= ALL 
            {
              byte[] RESULT = null;
		 RESULT = Selection.all(parser.renderer); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // statement ::= INSERTION STRING 
            {
              byte[] RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.insertion(parser.renderer, s); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // statement ::= SEQUENTIAL id_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.sequential(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // statement ::= MODULO INTEGER 
            {
              byte[] RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.modulo(parser.renderer, n.intValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // statement ::= RESIDUE id_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.residue(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // statement ::= ELEMENT id_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.element(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // statement ::= ATOM string_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.atom(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // statement ::= ID id_list 
            {
              byte[] RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.id(parser.renderer, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // selection_expression ::= SPHERE number AROUND number number number 
            {
              byte[] RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double z = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =
			Selection.sphere(parser.renderer, 
				r.doubleValue(),
				x.doubleValue(),
				y.doubleValue(),
				z.doubleValue());
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // selection_expression ::= GRAPH selection_expression 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		  RESULT = Selection.graph(parser.renderer, mask);
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // selection_expression ::= CONTACT number selection_expression 
            {
              byte[] RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =
			Selection.contact(parser.renderer,
				r.doubleValue(), mask);
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // selection_expression ::= SPHERE number AROUND selection_expression 
            {
              byte[] RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =
			Selection.sphere(parser.renderer,
				r.doubleValue(), mask);
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // selection_expression ::= BONDED selection_expression 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.bonded(parser.renderer, mask); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // selection_expression ::= BYRESIDUE selection_expression 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.byresidue(parser.renderer, mask); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // selection_expression ::= NOT selection_expression 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.not(mask); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // selection_expression ::= selection_expression OR selection_expression 
            {
              byte[] RESULT = null;
		int mask1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mask1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		byte[] mask1 = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mask2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mask2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask2 = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.or(mask1, mask2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // selection_expression ::= selection_expression AND selection_expression 
            {
              byte[] RESULT = null;
		int mask1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mask1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		byte[] mask1 = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mask2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mask2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask2 = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Selection.and(mask1, mask2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // selection_expression ::= LPAREN selection_expression RPAREN 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = mask; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // selection_expression ::= statement 
            {
              byte[] RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = mask; 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*selection_expression*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // selection ::= selection_expression 
            {
              DynamicArray RESULT = null;
		int maskleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int maskright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		byte[] mask = (byte[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray selectedAtoms =
				Selection.maskToArray(parser.renderer, mask);
			if(parser.renderer.getSelectCount()){
				System.out.println("[" + selectedAtoms.size() + "]");
			}
			RESULT = selectedAtoms;
		
              CUP$parser$result = new java_cup.runtime.Symbol(10/*selection*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // arg ::= ARG FALSE 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Object o[] = new Object[2];
			o[0] = a; o[1] = Boolean.FALSE;
			RESULT = o;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // arg ::= ARG TRUE 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Object o[] = new Object[2];
			o[0] = a; o[1] = Boolean.TRUE;
			RESULT = o;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // arg ::= ARG LCURLY selection RCURLY 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Object o[] = new Object[2];
			o[0] = a; o[1] = selectedAtoms;
			RESULT = o;
		
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // arg ::= ARG DOUBLE 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Object o[] = new Object[2]; o[0] = a; o[1] = d; RESULT = o; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // arg ::= ARG INTEGER 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Object o[] = new Object[2]; o[0] = a; o[1] = i; RESULT = o; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // arg ::= ARG STRING 
            {
              Object[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Object o[] = new Object[2]; o[0] = a; o[1] = value; RESULT = o; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*arg*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // arg_list ::= arg_list arg 
            {
              Arguments RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments h = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 h.put(a[0], a[1]); RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*arg_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // arg_list ::= arg 
            {
              Arguments RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Arguments h = new Arguments(); h.put(a[0], a[1]); RESULT = h; 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*arg_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // arguments ::= arg_list 
            {
              Arguments RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments a = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*arguments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // arguments ::= 
            {
              Arguments RESULT = null;
		 RESULT = new Arguments(); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*arguments*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // on_off ::= TOGGLE 
            {
              String RESULT = null;
		 RESULT = new String("toggle"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*on_off*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // on_off ::= OFF 
            {
              String RESULT = null;
		 RESULT = new String("off"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*on_off*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // on_off ::= ON 
            {
              String RESULT = null;
		 RESULT = new String("on"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*on_off*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // render_style ::= LINES 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Atom.Displayed); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*render_style*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // render_style ::= STICKS 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Atom.BallAndStick); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*render_style*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // render_style ::= CYLINDERS 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Atom.Cylinder); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*render_style*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // render_style ::= SPHERES 
            {
              Integer RESULT = null;
		 RESULT = new Integer(Atom.VDWSphere); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*render_style*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // texture_command ::= TEXTURE REMOVE STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // texture_command ::= TEXTURE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleTextureCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // texture_command ::= TEXTURE STRING LIPOPHILICITY 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Texture tex = Texture.lipophilicityTexture();
			parser.renderer.renderer.textures.put(name, tex);
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // texture_command ::= TEXTURE STRING SIMPLE 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			Texture tex = Texture.simpleTexture();
			parser.renderer.renderer.textures.put(name, tex);
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // texture_command ::= TEXTURE LOAD STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int imageleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int imageright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String image = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Hashtable textureHash =
				parser.renderer.renderer.textures;

			if(textureHash.get(name) == null){
				Texture tex = Texture.loadTexture(image);

				if(tex != null){
					textureHash.put(name, tex);
				}else{
					System.out.println("couldn't load texture " +
						 image);
				}
			}else{
				System.out.println("texture " + name +
						" already defined: not reloaded");
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(29/*texture_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // object_command ::= OBJECT STRING arguments 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleObjectCommand(name, args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // object_command ::= OBJECT STRING TEXTURE RECTANGULAR 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.rectangular(tm);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // object_command ::= OBJECT STRING COPYTO STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int newnameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int newnameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String newname = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			Tmesh tm = Tmesh.copy(objects);
			tm.setName(newname);
			parser.renderer.addGraphicalObject(tm);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // object_command ::= OBJECT STRING CLIP STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uvSpecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uvSpecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String uvSpec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = 0;
			if(uvSpec.indexOf("u") != -1) uv |= Tmesh.UTexture;
			if(uvSpec.indexOf("v") != -1) uv |= Tmesh.VTexture;

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				tm.clip(uv);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // object_command ::= OBJECT STRING TRANSPARENCY INTEGER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);
			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				tm.setTransparency(t.intValue());
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // object_command ::= OBJECT STRING LINEWIDTH number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double w = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);
			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				tm.setLineWidth(w.doubleValue());
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // object_command ::= OBJECT STRING COLOR STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colorNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int colorNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String colorName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);
			int color = Color32.getColorFromName(colorName);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				tm.setColorStyle(Tmesh.ObjectColor);
				tm.setColor(color);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // object_command ::= OBJECT STRING TEXTURE LIPOPHILICITY STRING number selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uvspecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uvspecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String uvspec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double dmax = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = -1;
			if(uvspec.equals("u")){
				uv = Tmesh.UTexture;
			}else if(uvspec.equals("v")){
				uv = Tmesh.VTexture;
			}

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.property_map(tm, selectedAtoms, uv,
					dmax.doubleValue(), false,
					Texgen.Lipophilicity);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // object_command ::= OBJECT STRING TEXTURE ELECTROSTATIC STRING number selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uvspecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uvspecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String uvspec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double dmax = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = -1;
			if(uvspec.equals("u")){
				uv = Tmesh.UTexture;
			}else if(uvspec.equals("v")){
				uv = Tmesh.VTexture;
			}

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.property_map(tm, selectedAtoms, uv,
					dmax.doubleValue(), false,
					Texgen.Electrostatic);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // object_command ::= OBJECT STRING TEXTURE CURVATURE STRING number selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int uvspecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int uvspecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String uvspec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dmaxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dmaxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double dmax = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = -1;
			if(uvspec.equals("u")){
				uv = Tmesh.UTexture;
			}else if(uvspec.equals("v")){
				uv = Tmesh.VTexture;
			}

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.curvature(tm, selectedAtoms, uv,
					dmax.doubleValue());
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // object_command ::= OBJECT STRING TEXTURE DISTANCE STRING selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int uvspecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uvspecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String uvspec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = -1;
			if(uvspec.equals("u")){
				uv = Tmesh.UTexture;
			}else if(uvspec.equals("v")){
				uv = Tmesh.VTexture;
			}

			DynamicArray objects =
				parser.renderer.renderer.getGraphicalObjects(name);

			for(int i = 0; i < objects.size(); i++){
				Tmesh tm = (Tmesh)objects.get(i);
				Texgen.distance(tm, selectedAtoms, uv);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // object_command ::= OBJECT STRING TEXTURE STRING number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int attributeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int attributeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String attribute = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double val = value.doubleValue();
			int att = 0;
    			if(attribute.equals("vscale")){
				att = Tmesh.VScale;
    			}else if(attribute.equals("uscale")){
				att = Tmesh.UScale;
    			}else if(attribute.equals("vdiv")){
				att = Tmesh.VScale;
				val = 1.0/val;
    			}else if(attribute.equals("udiv")){
				att = Tmesh.UScale;
				val = 1.0/val;
    			}else if(attribute.equals("voffset")){
				att = Tmesh.VOffset;
    			}else if(attribute.equals("uoffset")){
				att = Tmesh.UOffset;
			}else{
				System.out.println("unknown texture attribute " + attribute);
			}

			if(att != 0){
				parser.renderer.renderer.scaleTexture(name, att, val);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // object_command ::= OBJECT STRING TEXTURE STRING number number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rangeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rangeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String range = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int value2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int value2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double value2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int uv = 0;
	
			if(range.equals("urange")){
				uv = Tmesh.UTexture;
			}else if(range.equals("vrange")){
				uv = Tmesh.VTexture;
			}else{
				System.out.println("texture command not recognised: " + range);
			}

			if(uv > 0){
				double min = value.doubleValue();
				double max = value2.doubleValue();

				DynamicArray objects =
					parser.renderer.renderer.getGraphicalObjects(name);
					int objectCount = objects.size();

				double scale = 1./(max - min);

				for(int i = 0; i < objectCount; i++){
					Tmesh object = (Tmesh)objects.get(i);
					object.setTextureRange(uv, min, max);
				}
			}

		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // object_command ::= OBJECT STRING TEXTURE STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int textureleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int textureright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String texture = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(texture.equals("off")){
				parser.renderer.renderer.applyTexture(name, null);
			}else{
				parser.renderer.renderer.applyTexture(name, texture);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // object_command ::= OBJECT STRING BACKFACE on_off 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(state.equals("on")){
				parser.renderer.renderer.setBackface(name, true);
			}else if(state.equals("off")){
				parser.renderer.renderer.setBackface(name, false);
			}else{
				System.out.println("object backface: illegal state " + state);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // object_command ::= OBJECT STRING DISPLAY on_off 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			MoleculeRenderer r = parser.renderer;

			if(state.equals("off")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 0);
			}else if(state.equals("on")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 1);
			}else if(state.equals("toggle")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 2);
			}else{
				// otherwise assume it is a colour name.
				int c = Color32.getColorFromName(state);
				r.renderer.setGraphicalObjectsColour(pattern, c);
			}

		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // object_command ::= OBJECT DISPLAY STRING on_off 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			MoleculeRenderer r = parser.renderer;

			if(state.equals("off")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 0);
			}else if(state.equals("on")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 1);
			}else if(state.equals("toggle")){
				r.renderer.setGraphicalObjectsVisibility(pattern, 2);
			}else{
				// otherwise assume it is a colour name.
				int c = Color32.getColorFromName(state);
				r.renderer.setGraphicalObjectsColour(pattern, c);
			}

		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // object_command ::= OBJECT LOAD STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int filenameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int filenameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String filename = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Tmesh tm = Tmesh.read(filename);
			tm.setName(name);
			parser.renderer.addGraphicalObject(tm);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // object_command ::= OBJECT REMOVE STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeGraphicalObjects(pattern);
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*object_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // load_command ::= ZAP 
            {
              Object RESULT = null;
		 parser.renderer.reset(); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*load_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // load_command ::= LOAD MOLECULE STRING 
            {
              Object RESULT = null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.addMolecule(file, file); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*load_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // load_command ::= LOAD MOLECULE STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.addMolecule(file, name); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*load_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // schematic_command ::= SCHEMATIC arguments selection 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Tmesh tm = Schematic.create(args, parser.renderer, selectedAtoms);
			parser.renderer.addGraphicalObject(tm);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(30/*schematic_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // schematic_command ::= SECSTRUC arguments selection 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			String type = args.getString("-type", null);

			if(type == null){
				Tmesh tm = 
				SecondaryStructure.assign(parser.renderer.getMolecules());
				if(SecondaryStructure.debug){
					parser.renderer.addGraphicalObject(tm);
				}
			}else{
				int sstype = -1;
				if(type.equals("helix")){
					sstype = Residue.Helix;
				}else if(type.equals("sheet")){
					sstype = Residue.Sheet;
				}else if(type.equals("coil")){
					sstype = Residue.Coil;
				}

				if(sstype != -1){
					// inefficient
					for(int i = 0; i < selectedAtoms.size(); i++){
						Atom a = (Atom)selectedAtoms.get(i);
						Residue r = a.getResidue();
						r.setSecondaryStructure(sstype);
					}
				}
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(30/*schematic_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // active_site_command ::= ACTIVE_SITE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		astex.design.ActiveSite.handleCommand(parser.renderer.moleculeViewer, args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(38/*active_site_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // hbond_command ::= HBOND arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleHbondCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(37/*hbond_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // light_command ::= LIGHT INTEGER arguments 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleLightCommand(n.intValue(), args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(33/*light_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // animation_command ::= ANIMATE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.moleculeViewer.handleAnimation(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(31/*animation_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // miscellaneous_command ::= UPDATE arguments number_list 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		FloatArray nl = (FloatArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleUpdateCommand(args, nl);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // miscellaneous_command ::= STRING arguments 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			try {
				parser.renderer.handleUserCommand(s, args);
			}catch(Throwable t){
				t.printStackTrace();
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // miscellaneous_command ::= SLIDE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleSlideCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // miscellaneous_command ::= RUN STRING 
            {
              Object RESULT = null;
		int scriptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int scriptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String script = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.executeScript(script);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // miscellaneous_command ::= PRINT STRING 
            {
              Object RESULT = null;
		int outputleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int outputright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String output = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.moleculeViewer.handlePrint(output);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // miscellaneous_command ::= REPAINT 
            {
              Object RESULT = null;
		
			parser.renderer.moleculeViewer.repaint();
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // miscellaneous_command ::= BACKGROUND STRING 
            {
              Object RESULT = null;
		int colorNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int colorNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String colorName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int color = Color32.getColorFromName(colorName);
			parser.renderer.renderer.setBackgroundColor(color);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // miscellaneous_command ::= MATRIX number number number number number number number number number number number number number number number number 
            {
              Object RESULT = null;
		int x00left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int x00right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Double x00 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int x01left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int x01right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Double x01 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
		int x02left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int x02right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		Double x02 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int x03left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int x03right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Double x03 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int x10left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int x10right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Double x10 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int x11left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int x11right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Double x11 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int x12left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int x12right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Double x12 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int x13left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int x13right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Double x13 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int x20left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int x20right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Double x20 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int x21left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int x21right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double x21 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int x22left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int x22right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double x22 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int x23left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int x23right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double x23 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int x30left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int x30right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double x30 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int x31left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int x31right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x31 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int x32left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int x32right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double x32 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int x33left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int x33right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x33 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Matrix rm = parser.renderer.renderer.rotationMatrix;
			rm.x00 = x00.doubleValue();
			rm.x01 = x01.doubleValue();
			rm.x02 = x02.doubleValue();
			rm.x03 = x03.doubleValue();
			rm.x10 = x10.doubleValue();
			rm.x11 = x11.doubleValue();
			rm.x12 = x12.doubleValue();
			rm.x13 = x13.doubleValue();
			rm.x20 = x20.doubleValue();
			rm.x21 = x21.doubleValue();
			rm.x22 = x22.doubleValue();
			rm.x23 = x23.doubleValue();
			rm.x30 = x30.doubleValue();
			rm.x31 = x31.doubleValue();
			rm.x32 = x32.doubleValue();
			rm.x33 = x33.doubleValue();
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // miscellaneous_command ::= FETCH STRING 
            {
              Object RESULT = null;
		int urlNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int urlNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String urlName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			try {
				URL url = new URL(urlName);
				//System.out.println("opened url " + url);
				DataInputStream dis = new DataInputStream(url.openStream());
				//System.out.println("opened dis " + dis);
				String line;
				String contents = "";
				String lineSeparator =
					java.lang.System.getProperty("line.separator");

				parser.urlContentsBuffer.setLength(0);

				while((line = dis.readLine()) != null){
					//contents += line;
					//contents += lineSeparator;
					parser.urlContentsBuffer.append(line);
					parser.urlContentsBuffer.append(lineSeparator);
					//System.out.println("saw line <" + line + ">");
				}

				//System.out.println("got end of file");

				dis.close();

				//System.out.println("closed dis");

				parser.urlContents = parser.urlContentsBuffer.toString();

				//System.out.println("set return value");
			}catch(Exception e){
				System.out.println("error opening url: " + urlName);
				System.out.println("" + e);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // miscellaneous_command ::= TORSION CLEAR 
            {
              Object RESULT = null;
		
			parser.renderer.removeAllTorsions();
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // miscellaneous_command ::= ANGLE CLEAR 
            {
              Object RESULT = null;
		
			parser.renderer.removeAllAngles();
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // miscellaneous_command ::= SET STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(name.equals("arraycopy")){
				boolean b = value.equals("true") ? true : false;
				// fix
				//parser.renderer.setArrayCopy(b);
			}else if(name.equals("minimumspacing")){
				double d = FILE.readDouble(value);
				Surface.setMinimumSpacing(d);
			}else if(name.equals("contoursize")){
				int d = FILE.readInteger(value);
				parser.renderer.setContourSize(d);
			}else if(name.equals("pick")){
				int pickMode = -1;
				if(value.equals("distances")){
					pickMode = parser.renderer.DISTANCE_PICK;
				}else if(value.equals("angles")){
					pickMode = parser.renderer.ANGLE_PICK;
				}else{
					System.out.println("invalid pick mode " + value);
				}

				if(pickMode != -1){
					parser.renderer.setPickMode(pickMode);
				}
			}else{
				System.out.println("invalid parameter " + name);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // miscellaneous_command ::= DELETE selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleDeleteCommand(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // miscellaneous_command ::= EDIT STRING STRING selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleEditCommand(name, value, selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // miscellaneous_command ::= SET STRING on_off 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(name.equals("bondtypes")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.displayBondTypes(b);
			}else if(name.equals("bump_in_same_molecule")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.setBumpInSameMolecule(b);
			}else if(name.equals("symmetry")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.setSymmetry(b);
			}else if(name.equals("bumps")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.setDisplayBumps(b);
			}else if(name.equals("selectcount")){
				boolean b = value.equals("on") ? true : false;
				parser.renderer.setSelectCount(b);
			}else{
				System.out.println("invalid parameter " + name);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(26/*miscellaneous_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // view_command ::= VIEW arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			MoleculeViewer mv = parser.renderer.moleculeViewer;
			ViewCommand.execute(mv, args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(35/*view_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // distance_command ::= DISTANCE STRING 
            {
              Object RESULT = null;
		int stateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String state = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(state.equals("on")){
				parser.renderer.setDisplayDistances(true);
			}else if(state.equals("off")){
				parser.renderer.setDisplayDistances(false);
			}else if(state.equals("toggle")){
				boolean bumps =
					parser.renderer.getDisplayDistances();
				parser.renderer.setDisplayDistances(!bumps);
			}else{
				System.out.println("invalid distance state: " + state);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*distance_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // distance_command ::= DISTANCE CLEAR 
            {
              Object RESULT = null;
		 parser.renderer.removeAllDistances(); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*distance_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // distance_command ::= DISTANCE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleDistanceCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*distance_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // distance_command ::= DISTANCE selection TO selection 
            {
              Object RESULT = null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DynamicArray first = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray second = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			for(int i = 0; i < first.size(); i++){
				Atom firstAtom = (Atom)first.get(i);
				for(int j = 0; j < second.size(); j++){
					Atom secondAtom = (Atom)second.get(j);
					parser.renderer.addDistance(firstAtom,
							secondAtom);
				}
			}

			//Selection.dynamicArrayCache.add(first);
			//Selection.dynamicArrayCache.add(second);
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*distance_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // center_command ::= CENTER number number number 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double y = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int zleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int zright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double z = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.setCenter(x.doubleValue(),
					     y.doubleValue(),
					     z.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*center_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // center_command ::= RADIUS number 
            {
              Object RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.setRadius(x.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*center_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // center_command ::= CENTER selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setCenter(selectedAtoms); 
			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*center_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // label_command ::= LABEL STRING selection 
            {
              Object RESULT = null;
		int formatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String format = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.generateAtomLabels(format,
							   selectedAtoms);
			//for(int i = 0; i < selectedAtoms.size(); i++){
			//	Atom a = (Atom)selectedAtoms.get(i);
			//	a.setLabelled(true);
			//}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*label_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // label_command ::= LABEL CLEAR selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			for(int i = 0; i < selectedAtoms.size(); i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setCustomLabel(null);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(22/*label_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // color_command ::= TRANSPARENCY INTEGER selection 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setTransparency(n.intValue());
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // color_command ::= COLOR STRING selection 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int color =
				Color32.getColorFromName(c);

			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setColor(color);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // color_command ::= COLOR_BY_RAINBOW selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.colorByRainbow(selectedAtoms);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // color_command ::= COLOR_BY_BVALUE_RANGE 
            {
              Object RESULT = null;
		
			parser.renderer.colorByPropertyRange(Atom.B);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // color_command ::= COLOR_BY_ENERGY 
            {
              Object RESULT = null;
		
			parser.renderer.colorByPropertyRange(Atom.E);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // color_command ::= COLOR_BY_BVALUE 
            {
              Object RESULT = null;
		
			parser.renderer.colorByBFactor();
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // color_command ::= COLOR_BY_CHAIN 
            {
              Object RESULT = null;
		
			parser.renderer.colorByChain();
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // color_command ::= COLOR_BY_ATOM 
            {
              Object RESULT = null;
		
			parser.renderer.colorByAtom();
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*color_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // surface_command ::= ANASURFACE arguments STRING STRING selection 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String colour = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();
			double xxx[][] = new double[selectionCount][3];
			double r[] = new double[selectionCount];
			int visible[] = new int[selectionCount];
			int colors[] = new int[selectionCount];
			int color = Color32.getColorFromName(colour);
			
			double probeRadius = args.getDouble("-probe", 1.5);

			AnaSurface.defaultProbeRadius = probeRadius;

			int quality = args.getInteger("-quality", 2);

			AnaSurface.defaultQuality = quality;


			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				xxx[i][0] = a.x;
				xxx[i][1] = a.y;
				xxx[i][2] = a.z;
				r[i] = a.getVDWRadius();
				visible[i] = 1;
				colors[i] = a.getColor();
			}

			AnaSurface s =
				new AnaSurface(xxx, r, visible, colors, selectionCount);

			// set the background color for the object
			s.backgroundColor = color;


			// construct the surface.
			Tmesh tm = s.construct();

			tm.setName(name);

			parser.renderer.addGraphicalObject(tm);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(25/*surface_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // display_command ::= SURFACE arguments STRING STRING selection 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String colour = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			if(args.getBoolean("-lazy", false) == false ||
                           parser.renderer.renderer.getGraphicalObject(name) == null){
				parser.renderer.removeGraphicalObjects(name);
				Surface.setProbeRadius(args.getDouble("probe", 1.5));

				MoleculeRenderer r = parser.renderer;
				Tmesh surface =
					Surface.connolly(selectedAtoms, 0.3,
						args.getBoolean("solid", false));
				surface.setName(name);
				int c = Color32.getColorFromName(colour);
				surface.setColor(c);
				r.addGraphicalObject(surface);
			}
			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // display_command ::= ATTRIBUTE number selection 
            {
              Object RESULT = null;
		int attleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer att = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();
			int value = att.intValue();
			int selectedAtomCount = selectedAtoms.size();
			boolean printedError = false;

	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				if(value == Atom.B){
					a.setBFactor(newr);
				}else if(value == Atom.O){
					a.setOccupancy(newr);
				}else if(value == Atom.X){
					a.setX(newr);
				}else if(value == Atom.Y){
					a.setY(newr);
				}else if(value == Atom.Z){
					a.setZ(newr);
				}else{
					if(!printedError){
						System.out.println("error unknown attribute " + value);
						printedError = true;
					}
				}

	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // display_command ::= CHARGE number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			int selectedAtomCount = selectedAtoms.size();
	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setPartialCharge(newr);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // display_command ::= STICK_COLOR STRING selection 
            {
              Object RESULT = null;
		int colourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int colourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String colour = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int c = Color32.getColorFromName(colour);
			DynamicArray selectedBonds =
				parser.renderer.getBondsInSelection(selectedAtoms);

			for(int i = 0; i < selectedBonds.size(); i++){
				Bond b = (Bond)selectedBonds.get(i);
				b.setBondColor(c);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // display_command ::= BOND_WIDTH INTEGER selection 
            {
              Object RESULT = null;
		int iwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iwright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer iw = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int neww = iw.intValue();

			DynamicArray selectedBonds =
				parser.renderer.getBondsInSelection(selectedAtoms);
			for(int i = 0; i < selectedBonds.size(); i++){
				Bond b = (Bond)selectedBonds.get(i);
				b.setBondWidth(neww);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // display_command ::= CYLINDER_RADIUS number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			DynamicArray selectedBonds =
				parser.renderer.getBondsInSelection(selectedAtoms);
			for(int i = 0; i < selectedBonds.size(); i++){
				Bond b = (Bond)selectedBonds.get(i);
				b.setCylinderWidth(newr);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // display_command ::= STICK_RADIUS number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			DynamicArray selectedBonds =
				parser.renderer.getBondsInSelection(selectedAtoms);
			for(int i = 0; i < selectedBonds.size(); i++){
				Bond b = (Bond)selectedBonds.get(i);
				b.setStickWidth(newr);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // display_command ::= BALL_RADIUS number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			int selectedAtomCount = selectedAtoms.size();
	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setBallRadius(newr);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // display_command ::= VDW number selection 
            {
              Object RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			double newr = r.doubleValue();

			int selectedAtomCount = selectedAtoms.size();
	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setVDWRadius(newr);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // display_command ::= DOTSURFACE STRING INTEGER selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeGraphicalObjects(name);

			Tmesh dotSurface =
				Surface.dotSurface(selectedAtoms, n.intValue());

			dotSurface.setName(name);

			parser.renderer.addGraphicalObject(dotSurface);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // display_command ::= CLIP DECREASE number 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.renderer.setClip(parser.renderer.renderer.getClip() - c.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // display_command ::= CLIP INCREASE number 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.renderer.setClip(parser.renderer.renderer.getClip() + c.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // display_command ::= CLIP number number 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.renderer.setClip(c.doubleValue(), d.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // display_command ::= CLIP number 
            {
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 parser.renderer.renderer.setClip(c.doubleValue()); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // display_command ::= DISPLAY WIDE selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int moleculeCount = parser.renderer.getMoleculeCount();

			for(int m = 0; m < moleculeCount; m++){
	    			Molecule molecule = parser.renderer.getMolecule(m);
				int bondCount = molecule.getBondCount();

				for(int b = 0; b < bondCount; b++){
					Bond bond = molecule.getBond(b);
					bond.setBondWidth(1);
	    			}
			}

                        int atomCount = selectedAtoms.size();

                        for(int a = 0; a < atomCount; a++){
                                Atom atom = (Atom)selectedAtoms.get(a);
                                int bondCount = atom.getBondCount();
                                for(int b = 0; b < bondCount; b++){
                                        Bond bond = atom.getBond(b);
                                        bond.setBondWidth(2);
                                }
                        }

			//Selection.dynamicArrayCache.add(selectedAtoms);
                
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // display_command ::= DISPLAY render_style on_off selection 
            {
              Object RESULT = null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer mode = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int onoffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int onoffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String onoff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int displayBit = mode.intValue();;
			int on = 0;

			if(onoff.equals("on")){
				on = 1;
			}else if(onoff.equals("off")){
				on = 0;
				displayBit = ~displayBit;
			}else{
				System.out.println("illegal state in display command " + onoff);
			}
			
			if(displayBit != 0){
				int atomCount = selectedAtoms.size();
	
				for(int a = 0; a < atomCount; a++){
					Atom atom = (Atom)selectedAtoms.get(a);
					if(on == 1){
						atom.attributes |= displayBit;
					}else{
						atom.attributes &= displayBit;
					}
				}
			}else{
				System.out.println("invalid display mode " + mode);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // display_command ::= DISPLAY render_style selection 
            {
              Object RESULT = null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer mode = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int displayBit = mode.intValue();;

			if(displayBit != 0){
		   	 	AtomIterator iterator =
					parser.renderer.getAtomIterator();
		    
	  		  	while(iterator.hasMoreElements()){
					Atom atom = iterator.getNextAtom();
					atom.attributes &= ~displayBit;
				}
				
				int atomCount = selectedAtoms.size();
	
				for(int a = 0; a < atomCount; a++){
					Atom atom = (Atom)selectedAtoms.get(a);
					atom.attributes |= displayBit;
				}
			}else{
				System.out.println("invalid display mode " + mode);
			}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // display_command ::= DISPLAY selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			AtomIterator iterator =
				parser.renderer.getAtomIterator();
	    
			while(iterator.hasMoreElements()){
				Atom atom = iterator.getNextAtom();
				atom.setTemporarilySelected(false);
		    	}

			int selectedAtomCount = selectedAtoms.size();
	    		for(int i = 0; i < selectedAtomCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setTemporarilySelected(true);
	    		}

	   	 	iterator = parser.renderer.getAtomIterator();
	    
	  	  	while(iterator.hasMoreElements()){
				Atom atom = iterator.getNextAtom();
				if(atom.isTemporarilySelected()){
		    			atom.setDisplayed(true);
				}else{
		   			atom.setDisplayed(false);
				}
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*display_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // map_command ::= MAP STRING arguments 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			//System.out.println("args " + args);
			parser.renderer.handleMapCommand(name, args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // map_command ::= MAP STRING CONTOUR INTEGER on_off 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int onoffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int onoffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String onoff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int displayed = -1;
			
			astex.Map map = parser.renderer.getMap(name);

			if(onoff.equals("toggle")){
			  displayed = 2;
			}else if(onoff.equals("on")){
			  displayed = 1;
			}else if(onoff.equals("off")){
			  displayed = 0;
			}

			parser.renderer.setMapContourDisplayed(name,
				contour.intValue(),
				displayed);

			//map.setNeedsReading(true);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // map_command ::= MAP STRING CLIP selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.clipMaps(name, selectedAtoms, true);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // map_command ::= MAP STRING CONTOUR INTEGER TRANSPARENCY INTEGER 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMapContourTransparency(name,
								contour.intValue(),
								t.intValue());

		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // map_command ::= MAP STRING CONTOUR INTEGER LINEWIDTH number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double w = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMapContourLineWidth(name,
								contour.intValue(),
								w.doubleValue());

		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // map_command ::= MAP STRING CONTOUR INTEGER SOLID on_off 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray maps = parser.renderer.getMaps(name);

			for(int i = 0; i < maps.size(); i++){
				astex.Map map = (astex.Map)maps.get(i);
				if(value.equals("on")){
					map.setContourStyle(contour.intValue(), astex.Map.Surface);
				}else{
					map.setContourStyle(contour.intValue(), astex.Map.Lines);
				}
				parser.renderer.contourMap(map, contour.intValue());
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // map_command ::= MAP STRING CONTOUR INTEGER COLOR STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				int colour = Color32.getColorFromName(c);

				//System.out.println("color change to " + colour);
				parser.renderer.setMapContourColour(name,
						contour.intValue(),
						colour);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // map_command ::= MAP STRING CONTOUR INTEGER STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int onoffleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int onoffright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String onoff = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			DynamicArray maps = parser.renderer.getMaps(name);

			for(int i = 0; i < maps.size(); i++){
				astex.Map map = (astex.Map)maps.get(i);
				if(onoff.equals("wire")){
					map.setContourStyle(contour.intValue(), astex.Map.Lines);
					parser.renderer.contourMap(map, contour.intValue());
				}else if(onoff.equals("solid")){
					map.setContourStyle(contour.intValue(), astex.Map.Surface);
					parser.renderer.contourMap(map, contour.intValue());
				}else{
					int colour =
						Color32.getColorFromName(onoff);
					//System.out.println("color change to " + colour);
					parser.renderer.setMapContourColour(name,
							contour.intValue(),
							colour);
				}
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // map_command ::= MAP STRING CONTOUR INTEGER number 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int contourleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int contourright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer contour = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double value = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMapContourLevel(name,
					contour.intValue(),
					value.doubleValue());
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // map_command ::= MAP REMOVE STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeMap(name);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // map_command ::= MAP LOAD STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			astex.Map map = astex.Map.create();
			map.setFile(file);
			map.setName(name);
			parser.renderer.addMap(map);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*map_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // remove_command ::= REMOVE OBJECT STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeGraphicalObjects(pattern);
		
              CUP$parser$result = new java_cup.runtime.Symbol(28/*remove_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // remove_command ::= REMOVE MOLECULE STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeMolecule(pattern);
		
              CUP$parser$result = new java_cup.runtime.Symbol(28/*remove_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // molecule_command ::= MOLECULE REMOVE STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.removeMolecule(pattern);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // molecule_command ::= MOLECULE DISPLAY STRING STRING 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMoleculeVisibility(pattern, action);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // molecule_command ::= MOLECULE STRING STRING on_off 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMoleculeVariable(pattern, name, value);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // molecule_command ::= MOLECULE DISPLAY STRING on_off 
            {
              Object RESULT = null;
		int patternleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String pattern = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int actionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int actionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String action = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.setMoleculeVisibility(pattern, action);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // molecule_command ::= MOLECULE LOAD STRING 
            {
              Object RESULT = null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.addMolecule(file, file);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // molecule_command ::= MOLECULE LOAD STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.addMolecule(file, name);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // molecule_command ::= MOLECULE LAZY STRING STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String file = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Molecule mol = parser.renderer.getMolecule(name);

			if(mol == null){
				parser.renderer.addMolecule(file, name);
			}
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // molecule_command ::= WRITE arguments 
            {
              Object RESULT = null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Arguments args = (Arguments)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.handleWriteCommand(args);
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*molecule_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // selection_command ::= EVALUATE selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Selection.store(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // selection_command ::= PUSH 
            {
              Object RESULT = null;
		
			AtomIterator iterator =
				parser.renderer.getAtomIterator();
			DynamicArray selectedAtoms = new DynamicArray();
	    
			// clear the selection state of all atoms
			while(iterator.hasMoreElements()){
				Atom atom = iterator.getNextAtom();
				if(atom.isSelected()){
					selectedAtoms.add(atom);
					atom.setSelected(false);
				}
			}
		
			parser.renderer.pushSelection(selectedAtoms);

		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // selection_command ::= UNDEFINE STRING 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			parser.renderer.groups.remove(name);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // selection_command ::= DEFINE STRING selection 
            {
              Object RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			System.out.println("storing definition " + name +
				" atom count " + selectedAtoms.size());

			Hashtable h = new Hashtable();

			int count = selectedAtoms.size();

			for(int i = 0; i < count; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				h.put(a, a);
			}

			parser.renderer.groups.put(name, h); 

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // selection_command ::= INVERT selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				if(a.isSelected()){
					a.setSelected(false);
				}else{
					a.setSelected(true);
				}
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // selection_command ::= EXCLUDE selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setSelected(false);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // selection_command ::= APPEND selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			int selectionCount = selectedAtoms.size();

			for(int i = 0; i < selectionCount; i++){
				Atom a = (Atom)selectedAtoms.get(i);
				a.setSelected(true);
	    		}

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // selection_command ::= SELECT selection 
            {
              Object RESULT = null;
		int selectedAtomsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int selectedAtomsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		DynamicArray selectedAtoms = (DynamicArray)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			AtomIterator iterator =
				parser.renderer.getAtomIterator();
	    
			// clear the selection state of all atoms
			while(iterator.hasMoreElements()){
				Atom atom = iterator.getNextAtom();
				atom.setSelected(false);
			}
		
			parser.renderer.setSelected(selectedAtoms);

			//Selection.dynamicArrayCache.add(selectedAtoms);
		
              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // selection_command ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*selection_command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // definition ::= active_site_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // definition ::= hbond_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // definition ::= skeleton_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // definition ::= view_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // definition ::= write_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // definition ::= light_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // definition ::= modelling_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // definition ::= animation_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definition ::= schematic_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definition ::= surface_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // definition ::= texture_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // definition ::= remove_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // definition ::= load_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definition ::= miscellaneous_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definition ::= object_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definition ::= selection_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definition ::= label_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definition ::= color_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // definition ::= distance_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definition ::= center_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definition ::= display_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definition ::= map_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // definition ::= molecule_command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*definition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command ::= definition SEMI 
            {
              Object RESULT = null;
		 parser.renderer.dirty = true; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*command*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // script ::= command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= script EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // script ::= script command 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*script*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

